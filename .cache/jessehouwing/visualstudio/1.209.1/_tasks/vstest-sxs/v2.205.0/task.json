{
  "name": "VSTest-sxs",
  "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkId=835764)",
  "demands": [
    "vstest"
  ],
  "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/test/vstest",
  "friendlyName": "Visual Studio Test (Side-by-side)",
  "dataSourceBindings": [
    {
      "initialContextTemplate": "{\"skip\": \"0\"}",
      "resultSelector": "jsonpath:$.value[*]",
      "callbackContextTemplate": "{\"skip\": \"{{add skip 1000}}\"}",
      "target": "testPlan",
      "callbackRequiredTemplate": "{{isEqualNumber result.count 1000}}",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans?filterActivePlans=true&api-version=3.0-preview.2&$skip={{skip}}&$top=1000",
      "endpointId": "tfs:teamfoundation"
    },
    {
      "endpointId": "tfs:teamfoundation",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/configurations?api-version=3.0-preview.1",
      "target": "testConfiguration",
      "resultSelector": "jsonpath:$.value[*]",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }"
    },
    {
      "parameters": {
        "testPlan": "$(testPlan)"
      },
      "endpointId": "tfs:teamfoundation",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans/{{testPlan}}/suites?$asTreeView=true&api-version=3.0-preview.2",
      "target": "testSuite",
      "resultSelector": "jsonpath:$.value[*]"
    }
  ],
  "inputs": [
    {
      "type": "pickList",
      "helpMarkDown": "<ul><li><b>Test assembly: </b>Use this option to specify one or more test assemblies that contain your tests. You can optionally specify a filter criteria to select only specific tests.</li><li><b>Test plan: </b>Use this option to run tests from your test plan that have an automated test method associated with it.</li><li><b>Test run: </b>Use this option when you are setting up an environment to run tests from the Test hub. This option should not be used when running tests in a continuous integration / continuous deployment (CI/CD) pipeline.</li>",
      "required": true,
      "label": "Select tests using",
      "options": {
        "testPlan": "Test plan",
        "testRun": "Test run",
        "testAssemblies": "Test assemblies"
      },
      "properties": {
        "EditableOptions": "True"
      },
      "defaultValue": "testAssemblies",
      "groupName": "testSelection",
      "name": "testSelector"
    },
    {
      "type": "multiLine",
      "helpMarkDown": "Run tests from the specified files.<br>Ordered tests and webtests can be run by specifying the .orderedtest and .webtest files respectively. To run .webtest, Visual Studio 2017 Update 4 or higher is needed. <br><br>The file paths are relative to the search folder. Supports multiple lines of minimatch patterns. [More information](https://aka.ms/minimatchexamples)",
      "visibleRule": "testSelector = testAssemblies",
      "required": true,
      "label": "Test files",
      "properties": {
        "resizable": "true",
        "rows": "3"
      },
      "defaultValue": "**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**",
      "groupName": "testSelection",
      "name": "testAssemblyVer2"
    },
    {
      "type": "pickList",
      "helpMarkDown": "Select a test plan containing test suites with automated test cases.",
      "visibleRule": "testSelector = testPlan",
      "required": true,
      "label": "Test plan",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      },
      "defaultValue": "",
      "groupName": "testSelection",
      "name": "testPlan"
    },
    {
      "type": "pickList",
      "helpMarkDown": "Select one or more test suites containing automated test cases. Test case work items must be associated with an automated test method. [Learn more.](https://go.microsoft.com/fwlink/?linkid=847773",
      "visibleRule": "testSelector = testPlan",
      "required": true,
      "label": "Test suite",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True",
        "MultiSelect": "True"
      },
      "defaultValue": "",
      "groupName": "testSelection",
      "name": "testSuite"
    },
    {
      "type": "pickList",
      "helpMarkDown": "Select Test Configuration.",
      "visibleRule": "testSelector = testPlan",
      "required": true,
      "label": "Test configuration",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      },
      "defaultValue": "",
      "groupName": "testSelection",
      "name": "testConfiguration"
    },
    {
      "type": "string",
      "helpMarkDown": "Test run based selection is used when triggering automated test runs from the test hub. This option cannot be used for running tests in the CI/CD pipeline.",
      "visibleRule": "testSelector = testRun",
      "required": false,
      "label": "Test Run",
      "properties": {
        "resizable": "true",
        "rows": "3"
      },
      "defaultValue": "$(test.RunId)",
      "groupName": "testSelection",
      "name": "tcmTestRun"
    },
    {
      "type": "string",
      "helpMarkDown": "Folder to search for the test assemblies.",
      "required": true,
      "label": "Search folder",
      "name": "searchFolder",
      "defaultValue": "$(System.DefaultWorkingDirectory)",
      "groupName": "testSelection"
    },
    {
      "type": "string",
      "helpMarkDown": "Folder to store test results. When this input is not specified, results are stored in $(Agent.TempDirectory)/TestResults by default, which is cleaned at the end of a pipeline run. The results directory will always be cleaned up at the start of the vstest task before the tests are run. Relative folder path if provided will be considered relative to $(Agent.TempDirectory)",
      "required": false,
      "label": "Test results folder",
      "name": "resultsFolder",
      "defaultValue": "$(Agent.TempDirectory)\\TestResults",
      "groupName": "testSelection"
    },
    {
      "label": "Test filter criteria",
      "visibleRule": "testSelector = testAssemblies",
      "groupName": "testSelection",
      "defaultValue": "",
      "required": false,
      "name": "testFiltercriteria",
      "type": "string",
      "helpMarkDown": "Additional criteria to filter tests from Test assemblies. For example: `Priority=1|Name=MyTestMethod`. [More information](https://msdn.microsoft.com/en-us/library/jj155796.aspx)"
    },
    {
      "label": "Run only impacted tests",
      "visibleRule": "testSelector = testAssemblies",
      "groupName": "testSelection",
      "defaultValue": "False",
      "required": false,
      "name": "runOnlyImpactedTests",
      "type": "boolean",
      "helpMarkDown": "Automatically select, and run only the tests needed to validate the code change. [More information](https://aka.ms/tialearnmore)"
    },
    {
      "label": "Number of builds after which all tests should be run",
      "visibleRule": "testSelector = testAssemblies && runOnlyImpactedTests = true",
      "groupName": "testSelection",
      "defaultValue": "50",
      "required": false,
      "name": "runAllTestsAfterXBuilds",
      "type": "string",
      "helpMarkDown": "Number of builds after which to automatically run all tests. Test Impact Analysis stores the mapping between test cases and source code. It is recommended to regenerate the mapping by running all tests, on a regular basis."
    },
    {
      "type": "boolean",
      "helpMarkDown": "To run UI tests, ensure that the agent is set to run in interactive mode. Setting up an agent to run interactively must be done before queueing the build / release. Checking this box does <b>not</b> configure the agent in interactive mode automatically. This option in the task is to only serve as a reminder to configure agent appropriately to avoid failures. <br><br> Hosted Windows agents from the VS 2015 and 2017 pools can be used to run UI tests.<br> [More information](https://aka.ms/uitestmoreinfo).",
      "required": false,
      "label": "Test mix contains UI tests",
      "name": "uiTests",
      "defaultValue": "false",
      "groupName": "testSelection"
    },
    {
      "type": "radio",
      "defaultValue": "version",
      "required": false,
      "label": "Select test platform using",
      "options": {
        "location": "Specific location",
        "version": "Version"
      },
      "name": "vstestLocationMethod",
      "groupName": "executionOptions"
    },
    {
      "type": "pickList",
      "helpMarkDown": "The version of Visual Studio test to use. If latest is specified it chooses Visual Studio 2017 or Visual Studio 2015 depending on what is installed. Visual Studio 2013 is not supported. To run tests without needing Visual Studio on the agent, use the ‘Installed by tools installer’ option. Be sure to include the ‘Visual Studio Test Platform Installer’ task to acquire the test platform from nuget.",
      "visibleRule": "vstestLocationMethod = version",
      "required": false,
      "label": "Test platform version",
      "options": {
        "latest": "Latest",
        "16.0": "Visual Studio 2019",
        "14.0": "Visual Studio 2015",
        "toolsInstaller": "Installed by Tools Installer",
        "15.0": "Visual Studio 2017"
      },
      "properties": {
        "EditableOptions": "True"
      },
      "defaultValue": "latest",
      "groupName": "executionOptions",
      "name": "vsTestVersion"
    },
    {
      "label": "Path to vstest.console.exe",
      "visibleRule": "vstestLocationMethod = location",
      "groupName": "executionOptions",
      "defaultValue": "",
      "required": false,
      "name": "vstestLocation",
      "type": "string",
      "helpMarkDown": "Optionally supply the path to VSTest."
    },
    {
      "type": "filePath",
      "helpMarkDown": "Path to runsettings or testsettings file to use with the tests.",
      "required": false,
      "label": "Settings file",
      "name": "runSettingsFile",
      "defaultValue": "",
      "groupName": "executionOptions"
    },
    {
      "label": "Override test run parameters",
      "groupName": "executionOptions",
      "defaultValue": "",
      "required": false,
      "name": "overrideTestrunParameters",
      "type": "multiLine",
      "helpMarkDown": "Override parameters defined in the `TestRunParameters` section of runsettings file or `Properties` section of testsettings file. For example: `-key1 value1 -key2 value2`. Note: Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher ",
      "properties": {
        "resizable": "true",
        "editorExtension": "ms.vss-services-azure.parameters-grid",
        "rows": "3"
      }
    },
    {
      "type": "string",
      "helpMarkDown": "Directory path to custom test adapters. Adapters residing in the same folder as the test assemblies are automatically discovered.",
      "required": false,
      "label": "Path to custom test adapters",
      "name": "pathtoCustomTestAdapters",
      "defaultValue": "",
      "groupName": "executionOptions"
    },
    {
      "type": "boolean",
      "helpMarkDown": "If set, tests will run in parallel leveraging available cores of the machine. This will override the MaxCpuCount if specified in your runsettings file. [Click here](https://aka.ms/paralleltestexecution) to learn more about how tests are run in parallel.",
      "required": false,
      "label": "Run tests in parallel on multi-core machines",
      "name": "runInParallel",
      "defaultValue": "False",
      "groupName": "executionOptions"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Runs the tests in an isolated process. This makes vstest.console.exe process less likely to be stopped on an error in the tests, but tests might run slower. This option currently cannot be used when running with the multi-agent job setting.",
      "required": false,
      "label": "Run tests in isolation",
      "name": "runTestsInIsolation",
      "defaultValue": "False",
      "groupName": "executionOptions"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Collect code coverage information from the test run.",
      "required": false,
      "label": "Code coverage enabled",
      "name": "codeCoverageEnabled",
      "defaultValue": "False",
      "groupName": "executionOptions"
    },
    {
      "type": "string",
      "helpMarkDown": "Other console options that can be passed to vstest.console.exe, as documented <a href=\"https://aka.ms/vstestotherconsoleoptions\" target=\"_blank\">here</a>. <p>These options are not supported and will be ignored when running tests using the ‘Multi agent’ parallel setting of an agent job or when running tests using ‘Test plan’ or 'Test run' option or when a custom batching option is selected. The options can be specified using a settings file instead.</p>",
      "required": false,
      "label": "Other console options",
      "name": "otherConsoleOptions",
      "defaultValue": "",
      "groupName": "executionOptions"
    },
    {
      "type": "pickList",
      "helpMarkDown": "A batch is a group of tests. A batch of tests runs its tests at the same time and results are published for the batch. If the job in which the task runs is set to use multiple agents, each agent picks up any available batches of tests to run in parallel.<br><br><b>Based on the number of tests and agents:</b> Simple batching based on the number of tests and agents participating in the test run.<br><br><b>Based on past running time of tests:</b> This batching considers past running time to create batches of tests such that each batch has approximately equal running time.<br><br><b>Based on test assemblies:</b> Tests from an assembly are batched together.",
      "required": false,
      "label": "Batch tests",
      "options": {
        "basedOnTestCases": "Based on number of tests and agents",
        "basedOnExecutionTime": "Based on past running time of tests",
        "basedOnAssembly": "Based on test assemblies"
      },
      "properties": {
        "EditableOptions": "True"
      },
      "defaultValue": "basedOnTestCases",
      "groupName": "advancedExecutionOptions",
      "name": "distributionBatchType"
    },
    {
      "type": "radio",
      "helpMarkDown": "Simple batching based on the number of tests and agents participating in the test run. When the batch size is automatically determined, each batch contains `(total number of tests / number of agents)` tests. If a batch size is specified, each batch will contain the specified number of tests.",
      "visibleRule": "distributionBatchType = basedOnTestCases",
      "required": false,
      "label": "Batch options",
      "options": {
        "customBatchSize": "Specify a batch size",
        "autoBatchSize": "Automatically determine the batch size"
      },
      "defaultValue": "autoBatchSize",
      "groupName": "advancedExecutionOptions",
      "name": "batchingBasedOnAgentsOption"
    },
    {
      "label": "Number of tests per batch",
      "visibleRule": "distributionBatchType = basedOnTestCases && batchingBasedOnAgentsOption = customBatchSize",
      "groupName": "advancedExecutionOptions",
      "defaultValue": "10",
      "required": true,
      "name": "customBatchSizeValue",
      "type": "string",
      "helpMarkDown": "Specify batch size"
    },
    {
      "type": "radio",
      "helpMarkDown": "This batching considers past running time to create batches of tests such that each batch has approximately equal running time. Quick running tests will be batched together, while longer running tests may belong to a separate batch. When this option is used with the multi-agent job setting, total test time is reduced to a minimum.",
      "visibleRule": "distributionBatchType = basedOnExecutionTime",
      "required": false,
      "label": "Batch options",
      "options": {
        "customTimeBatchSize": "Specify running time per batch",
        "autoBatchSize": "Automatically determine the batch time"
      },
      "properties": {
        "EditableOptions": "True"
      },
      "defaultValue": "autoBatchSize",
      "groupName": "advancedExecutionOptions",
      "name": "batchingBasedOnExecutionTimeOption"
    },
    {
      "label": "Running time (sec) per batch",
      "visibleRule": "distributionBatchType = basedOnExecutionTime && batchingBasedOnExecutionTimeOption = customTimeBatchSize",
      "groupName": "advancedExecutionOptions",
      "defaultValue": "60",
      "required": true,
      "name": "customRunTimePerBatchValue",
      "type": "string",
      "helpMarkDown": "Specify the running time (sec) per batch"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Choosing this option will not distribute tests across agents when the task is running in a multi-agent job.<br>Each of the selected test(s) will be repeated on each agent.<br>The option is not applicable when the agent job is configured to run with no parallelism or with the multi-config option.",
      "required": false,
      "label": "Replicate tests instead of distributing when multiple agents are used in the job",
      "name": "dontDistribute",
      "defaultValue": "False",
      "groupName": "advancedExecutionOptions"
    },
    {
      "type": "string",
      "helpMarkDown": "Provide a name for the test run.",
      "required": false,
      "label": "Test run title",
      "name": "testRunTitle",
      "defaultValue": "",
      "groupName": "reportingOptions"
    },
    {
      "type": "string",
      "helpMarkDown": "Build platform against which the tests should be reported. If you have defined a variable for platform in your build task, use that here.",
      "required": false,
      "label": "Build platform",
      "name": "platform",
      "defaultValue": "",
      "groupName": "reportingOptions"
    },
    {
      "type": "string",
      "helpMarkDown": "Build configuration against which the tests should be reported. If you have defined a variable for configuration in your build task, use that here.",
      "required": false,
      "label": "Build configuration",
      "name": "configuration",
      "defaultValue": "",
      "groupName": "reportingOptions"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Opt in/out of publishing run level attachments.",
      "required": false,
      "label": "Upload test attachments",
      "name": "publishRunAttachments",
      "defaultValue": "true",
      "groupName": "reportingOptions"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Selecting this option will fail the task if specified minimum number of tests is not run.",
      "required": false,
      "label": "Fail the task if a minimum number of tests are not run.",
      "name": "failOnMinTestsNotRun",
      "defaultValue": "False",
      "groupName": "reportingOptions"
    },
    {
      "label": "Minimum # of tests",
      "visibleRule": "failOnMinTestsNotRun = true",
      "groupName": "reportingOptions",
      "defaultValue": "1",
      "required": false,
      "name": "minimumExpectedTests",
      "type": "string",
      "helpMarkDown": "Specify the minimum # of tests that should be run for the task to succeed. Total tests executed is calculated as the sum of passed, failed and aborted tests."
    },
    {
      "type": "boolean",
      "helpMarkDown": "Collect advanced diagnostics in case of catastrophic failures.",
      "required": false,
      "label": "Collect advanced diagnostics in case of catastrophic failures",
      "name": "diagnosticsEnabled",
      "defaultValue": "false",
      "groupName": "executionOptions"
    },
    {
      "type": "pickList",
      "helpMarkDown": "Collect process dump and attach to test run report.",
      "visibleRule": "diagnosticsEnabled = true",
      "required": false,
      "label": "Collect process dump and attach to test run report",
      "options": {
        "onAbortOnly": "On abort only",
        "never": "Never",
        "always": "Always"
      },
      "defaultValue": "onAbortOnly",
      "groupName": "executionOptions",
      "name": "collectDumpOn"
    },
    {
      "type": "boolean",
      "helpMarkDown": "Selecting this option will rerun any failed tests until they pass or the maximum # of attempts is reached.",
      "required": false,
      "label": "Rerun failed tests",
      "name": "rerunFailedTests",
      "defaultValue": "False",
      "groupName": "executionOptions"
    },
    {
      "type": "pickList",
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures.<br>You can specify % failures or # of failed tests as a threshold.",
      "visibleRule": "rerunFailedTests = true",
      "required": false,
      "label": "Do not rerun if test failures exceed specified threshold",
      "options": {
        "basedOnTestFailurePercentage": "% failure",
        "basedOnTestFailureCount": "# of failed tests"
      },
      "properties": {
        "EditableOptions": "True"
      },
      "defaultValue": "basedOnTestFailurePercentage",
      "groupName": "executionOptions",
      "name": "rerunType"
    },
    {
      "label": "% failure",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailurePercentage",
      "groupName": "executionOptions",
      "defaultValue": "30",
      "required": false,
      "name": "rerunFailedThreshold",
      "type": "string",
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures."
    },
    {
      "label": "# of failed tests",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailureCount",
      "groupName": "executionOptions",
      "defaultValue": "5",
      "required": false,
      "name": "rerunFailedTestCasesMaxLimit",
      "type": "string",
      "helpMarkDown": "Use this option to avoid rerunning tests when number of failed test cases crosses specified limit. This is applicable if any environment issues leads to massive failures."
    },
    {
      "label": "Maximum # of attempts",
      "visibleRule": "rerunFailedTests = true",
      "groupName": "executionOptions",
      "defaultValue": "3",
      "required": false,
      "name": "rerunMaxAttempts",
      "type": "string",
      "helpMarkDown": "Specify the maximum # of times a failed test should be retried. If a test passes before the maximum # of attempts is reached, it will not be rerun further."
    }
  ],
  "author": "Microsoft Corporation",
  "messages": {
    "codeCoverageInput": "Code coverage enabled : %s",
    "invalidRerunFailedThreshold": "Invalid rerun failed tests threshold, defaulting to 30%",
    "VstestFailed": "Vstest failed with error. Check logs for failures. There might be failed tests.",
    "ErrorWhileSettingTestImpactCollectorTestSettings": "Error occurred while setting Test Impact Collector in test settings file.",
    "rerunNotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 to rerun failed tests.",
    "testplanConfigInput": "Test plan configuration Id : %s",
    "testAssembliesSelector": "Test assemblies",
    "ErrorWhileUpdatingResponseFile": "Error occurred while updating the response file '%s'. All the tests will be executed for this run.",
    "vstestVersionInvalid": "Given test platform version %s is not supported.",
    "testImpactAndCCWontWork": "Test Impact (Run only Impacted tests) and Code Coverage data collector will not work.",
    "ErrorWhileUpdatingSettings": "Error occurred while updating the settings file. Using the specified settings file.",
    "ErrorWhileCreatingResponseFile": "Error occurred while creating the response file. All the tests will be executed for this run.",
    "rerunFailedThreshold": "Rerun failed tests threshold: %s",
    "LookingForVsInstalltion": "Attempting to find vstest.console from a visual studio installation with version %s.",
    "noTestSourcesFound": "No test sources found matching the given filter '%s'",
    "rerunMaxAttempts": "Rerun maximum attempts: %s",
    "RunTimePerBatch": "Run time per batch(sec) : %s",
    "VstestPassedReturnCode": "VsTest task succeeded.",
    "runTestInIsolationNotSupported": "Running tests in isolation is not supported when using the multi-agent job setting. This option will be ignored.",
    "minimumRunTimePerBatchWarning": "'Running time (seconds) per batch' should be at least '%s' seconds. Defaulting to the minimum supported value.",
    "invalidRerunFailedTestCasesMaxLimit": "Invalid rerun failed tests case limit, defaulting to 5",
    "configureDtaAgentFailed": "Configuring the test agent with the server failed even after %d retries with error %s",
    "testSourcesFilteringFailed": "Preparing the test sources file failed. Error : %s",
    "testRunIdInput": "Test run Id : '%s'",
    "PublishCodeChangesPerfTime": "Total time taken to publish code changes: %d milliseconds.",
    "UploadTestResultsPerfTime": "Total time taken to upload test results: %d milliseconds.",
    "runInIsolationInput": "Run in isolation : %s",
    "invalidRerunMaxAttempts": "Invalid/Exceeded rerun maximum attempts, defaulting to 3",
    "actionOnThresholdNotMet": "Action when minimum tests threshold not met : %s",
    "numberOfTestCasesPerSlice": "Number of test cases per batch : %s",
    "noVstestConsole": "Tests will not be executed with vstest console. Install Visual Studio 2017 RC or above to run tests via vstest console.",
    "disabledRerun": "Disabling the rerun of failed tests as the rerun threshold provided is %s",
    "vsVersionSelected": "VisualStudio version selected for test execution : %s",
    "ErrorOccuredWhileSettingRegistry": "Error occurred while setting registry key, Error: %s.",
    "rerunFailedTests": "Rerun failed tests: %s",
    "MultiConfigNotSupportedWithOnDemand": "On demand runs are not supported with Multi-Configuration option. Please use 'None' or 'Multi-agent' parallelism option.",
    "dtaNumberOfAgents": "Distributed test execution, number of agents in job : %s",
    "testRunIdInvalid": "The test selection is 'Test run', but the test run ID '%s' given is invalid",
    "UnexpectedVersionString": "Unexpected version string detected for vstest.console.exe: %s.",
    "testSelectorInput": "Test selector : %s",
    "VstestNotFound": "Visual Studio %d is not found. Try again with a version that exists on your build agent machine.",
    "UpdateThreeOrHigherRequired": "Install Visual Studio 2015 Update 3 or higher on your build agent machine to run the tests in parallel.",
    "minimumExpectedTests": "Minimum tests expected to be run: %d",
    "NoTestResultsDirectoryFound": "Test results directory not found.",
    "ErrorWhileListingDiscoveredTests": "Error occurred while discovering the tests. All the tests will be executed for this run.",
    "LookingForBuildToolsInstalltion": "Attempting to find vstest.console from a visual studio build tools installation with version %s.",
    "UpgradeAgentMessage": "Please upgrade your agent version. https://github.com/Microsoft/vsts-agent/releases",
    "searchFolderInput": "Search folder : %s",
    "invalidRunTimePerBatch": "Invalid 'Running time (sec) per batch': %s",
    "NoMatchingTestAssemblies": "No test assemblies found matching the pattern: %s.",
    "VstestTIANotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 RC or above to run Test Impact Analysis.",
    "runInParallelInput": "Run in parallel : %s",
    "invalidTestBatchSize": "Invalid batch size provided: %s",
    "VstestLocationDoesNotExist": "The location of 'vstest.console.exe' specified '%s' does not exist.",
    "UncPathNotSupported": "Path to test sources search folder cannot be a UNC path. Please provide a rooted path or a path relative to $(System.DefaultWorkingDirectory).",
    "NoIncludePatternFound": "No include pattern found. Specify at least one include pattern to search test assemblies.",
    "testPlanSelector": "Test plan",
    "InvalidSettingsFile": "The specified settings file %s is invalid or does not exist. Provide a valid settings file or clear the field.",
    "OnlyWindowsOsSupported": "This task is supported only on Windows agents and cannot be used on other platforms.",
    "otherConsoleOptionsInput": "Other console options : %s",
    "runTestsLocally": "Run the tests locally using %s",
    "ErrorWhileReadingTestSettings": "Error occurred while reading test settings file. Error : %s.",
    "NoResultsToPublish": "No results found to publish.",
    "pathToCustomAdaptersInvalid": "Path to custom adapters '%s' should be a directory and it should exist.",
    "VstestDiagNotSupported": "vstest.console.exe version does not support the /diag flag. Enable diagnostics via the exe.config files",
    "OverrideUseVerifiableInstrumentation": "Overriding UseVerifiableInstrumentation field to false in the runsettings file.",
    "ErrorReadingVstestVersion": "Error reading the version of vstest.console.exe.",
    "UserProvidedSourceFilter": "Source filter: %s",
    "runSettingsFileInput": "Run settings file : %s",
    "distributedTestWorkflow": "In distributed testing flow",
    "searchLocationNotDirectory": "Search folder: '%s' should be a directory and it should exist.",
    "ToolsInstallerInstallationError": "The Visual Studio Test Platform tools installer did not run or did not complete the installation successfully, please refer to the following blog for information on how to use the tools installer: https://aka.ms/vstesttoolsinstaller",
    "ErrorWhilePublishingCodeChanges": "Error occurred while publishing the code changes. All the tests will be executed for this run.",
    "pathToCustomAdaptersInput": "Path to custom adapters : %s",
    "toolsInstallerPathNotSet": "VsTest Test Platform folder was not found in cache.",
    "nonDistributedTestWorkflow": "Running tests using vstest.console.exe runner.",
    "GenerateResponseFilePerfTime": "Total time taken to get response file: %d milliseconds.",
    "ErrorWhileReadingRunSettings": "Error occurred while reading run settings file. Error : %s.",
    "testPlanInput": "Test plan Id : %s",
    "testRunSelector": "Test run",
    "uitestsparallel": "Running UI tests in parallel on the same machine can lead to errors. Consider disabling the ‘run in parallel’ option or run UI tests using a separate task. To learn more, see https://aka.ms/paralleltestexecution ",
    "NoVstestFound": "Test platform is not found. Try again after installing it on your build agent machine.",
    "RunInParallelNotSupported": "Running tests in parallel on multi-core machines is not supported with testsettings file. This option will be ignored.",
    "pathToCustomAdaptersContainsNoAdapters": "Path to custom adapters '%s' does not contain any test adapters, provide a valid path.",
    "rerunFailedTestCasesMaxLimit": "Rerun maximum failed test case limit: %s",
    "diagnosticsInput": "Diagnostics enabled : %s",
    "ErrorWhileSettingTestImpactCollectorRunSettings": "Error occurred while setting Test Impact Collector in run settings file.",
    "overrideNotSupported": "Overriding test run parameters is supported only with valid runsettings or testsettings file. This option will be ignored.",
    "VsTestVersionEmpty": "VsTestVersion is null or empty",
    "VideoCollectorNotSupportedWithRunSettings": "Video collector is not supported with run settings.",
    "testSuiteSelected": "Test suite Id selected: %s",
    "UnexpectedVersionNumber": "Unexpected version number detected for vstest.console.exe: %s.",
    "VstestFailedReturnCode": "VsTest task failed.",
    "minTestsNotExecuted": "The specified minimum number of tests %d were not executed in the test run.",
    "testAssemblyFilterInput": "Test assemblies : %s",
    "testFilterCriteriaInput": "Test filter criteria : %s",
    "testSettingPropertiesNotSupported": "Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher",
    "otherConsoleOptionsNotSupported": "Other console options is not supported for this task configuration. This option will be ignored.",
    "vstestLocationSpecified": "%s, specified location : %s",
    "DontShowWERUIDisabledWarning": "Windows Error Reporting DontShowUI not set, if the windows error dialog pops-up in the middle of UI test execution than the test will hang",
    "UnableToGetFeatureFlag": "Unable to get feature flag: %s"
  },
  "instanceNameFormat": "VsTest - $(testSelector)",
  "version": {
    "Patch": 0,
    "Major": 2,
    "Minor": 205
  },
  "visibility": [
    "Build",
    "Release"
  ],
  "category": "Test",
  "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "execution": {
    "Node": {
      "target": "runvstest.js"
    }
  },
  "groups": [
    {
      "name": "testSelection",
      "isExpanded": true,
      "displayName": "Test selection"
    },
    {
      "name": "executionOptions",
      "isExpanded": true,
      "displayName": "Execution options"
    },
    {
      "name": "advancedExecutionOptions",
      "isExpanded": false,
      "displayName": "Advanced execution options"
    },
    {
      "name": "reportingOptions",
      "isExpanded": true,
      "displayName": "Reporting options"
    }
  ],
  "minimumAgentVersion": "2.103.0",
  "id": "d962a10a-eaad-5083-bb69-0f4d57094a9a",
  "releaseNotes": "<ul><li><b>Run tests using an agent job:</b> Unified agent across Build, Release and Test allows for automation agents to be used for testing purposes as well. You can distribute tests using the multi-agent job setting. The multi-config job setting can be used to replicate tests in different configurations. <a href=\"https://aka.ms/testingwithphases\" target=\"_blank\">More information</a></li><li><b>Test Impact Analysis:</b> Automatically select and run only the tests needed to validate the code change.</li><li>Use the <b>Visual Studio Test Platform Installer task</b> to run tests without needing a full Visual Studio installation.</li></ul>"
}
