{
  "releaseNotes": "<li>Support for installing multiple versions side by side.</li><li>Support for patterns in version to fetch latest in minor/major version.</li><li>Restrict Multi-level lookup</li>",
  "preview": "true",
  "friendlyName": ".NET Core sdk/runtime installer (Side-by-side)",
  "id": "293bf4ff-c53b-5966-a88e-a9bfe843bc1d",
  "helpMarkDown": "[Learn more about this task](https://aka.ms/AA4ihfi)",
  "deprecated": true,
  "name": "DotNetCoreInstaller-sxs",
  "groups": [
    {
      "isExpanded": true,
      "name": "advanced",
      "displayName": "Advanced"
    }
  ],
  "author": "Microsoft Corporation",
  "demands": [],
  "satisfies": [
    "DotNetCore"
  ],
  "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer",
  "execution": {
    "Node10": {
      "target": "dotnetcoreinstaller.js"
    }
  },
  "category": "Tool",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "inputs": [
    {
      "defaultValue": "sdk",
      "required": true,
      "helpMarkDown": "Please select whether to install only runtime or SDK.",
      "label": "Package to install",
      "type": "pickList",
      "options": {
        "sdk": "SDK (contains runtime)",
        "runtime": "Only Runtime"
      },
      "name": "packageType"
    },
    {
      "defaultValue": "2.2.x",
      "required": true,
      "helpMarkDown": "Specify version of .NET Core SDK or runtime to install.<br/>Versions can be given in the following formats<li>2.x   => Install latest in major version.</li><li>2.2.x => Install latest in major and minor version</li><li>2.2.104 => Install exact version</li><br/>Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://github.com/dotnet/core/blob/master/release-notes/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json",
      "label": "Version",
      "type": "string",
      "name": "version"
    },
    {
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Select if you want preview versions to be included while searching for latest versions, such as while searching 2.2.x. This setting is ignored if you specify an exact version, such as: 3.0.100-preview3-010431",
      "label": "Include Preview Versions",
      "type": "boolean",
      "name": "includePreviewVersions"
    },
    {
      "groupName": "advanced",
      "defaultValue": "$(Agent.ToolsDirectory)/dotnet",
      "required": false,
      "helpMarkDown": "Specify where .Net Core SDK/Runtime should be installed. Different paths can have the following impact on .Net's behavior.<li>$(Agent.ToolsDirectory): This makes the version to be cached on the agent since this directory is not cleanup up across pipelines. All pipelines running on the agent, would have access to the versions installed previously using the agent.</li><li>$(Agent.TempDirectory): This can ensure that a pipeline doesn't use any cached version of .Net core since this folder is cleaned up after each pipeline.</li><li>Any other path: You can configure any other path given the agent process has access to the path. This will change the state of the machine and impact all processes running on it.<br/>Note that you can also configure Multi-Level Lookup setting which can configure .Net host's probing for a suitable version.",
      "label": "Path To Install .Net Core",
      "type": "string",
      "name": "installationPath"
    },
    {
      "groupName": "advanced",
      "defaultValue": false,
      "required": false,
      "helpMarkDown": "This input is only applicable to Windows based agents. This configures the behavior of .Net host process for looking up a suitable shared framework.<li>unchecked: Only versions present in the folder specified in this task would be looked by the host process.</li><li>checked: The host will attempt to look in pre-defined global locations using multi-level lookup.<br/>The default global locations are: <br/><b>For Windows:</b><br/>C:\\Program Files\\dotnet (64-bit processes)<br/>C:\\Program Files (x86)\\dotnet (32-bit process)</li> You can read more about it [**HERE**](https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/multilevel-sharedfx-lookup.md).<br/>",
      "label": "Perform Multi Level Lookup",
      "type": "boolean",
      "name": "performMultiLevelLookup"
    }
  ],
  "version": {
    "Major": 1,
    "Patch": 0,
    "Minor": 204
  },
  "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
  "messages": {
    "ToolToInstall": "Tool to install: .NET Core %s version %s.",
    "VersionsCanNotBeCompared": "Versions %s and %s cannot be compared. Both versions should be explicit.",
    "ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
    "FallingBackToAdjacentChannels": "Version %s could not be found in its channel, will now search in adjacent channels.",
    "InvalidVersionObject": "Releases.json has a release with invalid %s object: %s",
    "WarningVersionNotFound": "Could not fetch download information for version %s. Please check if the version specified is correct. You can refer the link for supported versions => https://github.com/dotnet/core/blob/master/release-notes/releases.json. Falling back to creating convention based URL.",
    "PrimaryPlatform": "Detected platform (Primary): %s",
    "PathNotFoundException": "Path: %s could not be located/found. Make sure the path exists.",
    "ErrorWhileGettingVersionFromChannel": "Failed while getting version %s from channel %s with error: %s",
    "VersionInformationNotComplete": "Version: %s required information is not complete in releases.json file. Error: %s",
    "UrlForReleaseChannelNotFound": "Could not find URL for releases.json of channel version: %s",
    "VersionNotFoundInCache": "Version %s was not found in cache.",
    "getDownloadUrlsFailed": "Failed to get download URLS. Error: %s.",
    "InvalidChannelObject": "Object cannot be used as Channel, required properties such as channel-version, releases.json is missing.",
    "DownloadUrlForMatchingOsNotFound": "Download URL for .Net Core %s version %s could not be found for the following OS platforms (rid): %s",
    "DetectingPlatform": "Detecting OS platform to find correct download package for the OS.",
    "ToolFailed": "Tool install failed: %s",
    "UnableToAccessPath": "Unable to access path: %s. Error: %s. Please make sure that agent process has access to the path.",
    "SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
    "CheckingToolCache": "Checking if a cached copy exists for this version...",
    "PrependGlobalToolPath": "Creating global tool path and pre-pending to PATH.",
    "DownloadingUrl": "Downloading .NET Core package from URL: %s",
    "VersionsFileMalformed": "The specified version's download links are not correctly formed in the supported versions document => %s/",
    "VersionFilesDataIncorrect": "Version's files data is missing or has missing required fields.",
    "FilesDataIsIncorrectInVersion": "In release %s for version %s, File data is incorrect (might have missing required fields, such as name, rid and url): %s",
    "NoSuitableChannelWereFound": "Channel corresponding to version %s could not be found.",
    "FailedWhileInstallingVersionAtPath": "Failed while installing version: %s at path: %s with error: %s",
    "CopyingFilesIntoPath": "Copying root files (such as dotnet.exe) into installation path: %s",
    "LookingForVersionInChannel": "Searching for version in channel %s",
    "CopyingFoldersIntoPath": "Copying all root folders into installation path: %s",
    "VersionIsLocalLatest": "Version: %s is the latest among the versions present at path: %s",
    "CouldNotDetectPlatform": "Could not detect the machine's OS",
    "FailedToCopyTopLevelFiles": "Failed to copy root files into installation path: %s. Error: %s",
    "CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
    "ComparingInstalledFileVersions": "Comparing if version being installed %s is greater than already installed version with version complete file name %s",
    "ErrorWhileSettingDotNetToolPath": "Failed while prepending .Net Core Tool path to PATH envrionment variable. Error: %s",
    "FailedInDetectingMachineArch": "Failed while detecting machine OS platform with error: %s",
    "ExceptionWhileDownloadOrReadReleasesIndex": "Failed to download or parse release-index.json with error: %s",
    "LegacyPlatform": "Detected platform (Legacy): %s",
    "ComparingInstalledFolderVersions": "Comparing if version being installed %s is greater than already installed version with folder name %s",
    "MatchingVersionNotFound": "No matching %s version could be found for specified version: %s Kindly note the preview versions are only considered in latest version searches if Include Preview Versions checkbox is checked.",
    "CreatingInstallationCompeleteFile": "Creating installation complete marker file for .Net core %s version %s",
    "UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
    "getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
    "NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
    "FileNameNotCorrectCompleteFileName": "File name %s is not a correct '.complete' file.",
    "GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
    "ExtractingPackage": "Extracting downloaded package %s.",
    "MatchingVersionForUserInputVersion": "Found version %s in channel %s for user specified version spec: %s",
    "VersionNotFound": "%s version matching: %s could not be found",
    "VersionIsNotLocalLatest": "Version: %s is not the latest among the versions present at %s",
    "FailedToDownloadPackage": "Failed to download package for installation",
    "ChannelVersionsNotComparable": "Channel versions %s and %s can not be compared. They both must have numeric major and minor versions.",
    "runtimeVersionPropertyNotFound": "runtime-version property could not be found for .Net Core %s version %s.",
    "CannotFindRuntimeVersionForCompletingInstallation": "Cannot find runtime version for package type: %s with version: %s",
    "ExplicitVersionRequired": "Version: %s is not allowed. Versions to be installed should be of format: major.minor.patchversion. For example: 2.2.1",
    "InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
    "ReleasesIndexBodyIncorrect": "Parsed releases index body is not correct. Kindly see if the releases-index section is not empty in the file.",
    "FailedWhileExtractingPacakge": "Failed while extracting downloaded package with error: %s",
    "RequiredChannelVersionForSpec": "Finding channel %s for version %s",
    "CachingTool": "Caching this installed tool.",
    "VersionCanNotBeDownloadedFromUrl": "Version: %s cannot be downloaded from URL: %s. Either the URL or version is incorrect.",
    "VersionNotAllowed": "Version %s is not allowed. Allowed version types are: majorVersion.x, majorVersion.minorVersion.x, majorVersion.minorVersion.patchVersion",
    "VersionFoundInCache": "Version: %s was found in cache."
  },
  "instanceNameFormat": "Install .NET Core $(packageType) $(version)"
}
