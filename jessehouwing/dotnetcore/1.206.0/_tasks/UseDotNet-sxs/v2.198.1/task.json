{
  "releaseNotes": "<li>Support for installing multiple versions side by side.</li><li>Support for patterns in version to fetch latest in minor/major version.</li><li>Restrict Multi-level lookup</li><li>Installs NuGet and provides proxy support.</li><li>Installs sdk versions from `global.json` file(s)</li>",
  "friendlyName": "Use .NET Core (Side-by-side)",
  "helpUrl": "https://aka.ms/AA4xgy0",
  "version": {
    "Patch": 1,
    "Major": 2,
    "Minor": 198
  },
  "inputs": [
    {
      "defaultValue": "sdk",
      "name": "packageType",
      "helpMarkDown": "Please select whether to install only runtime or SDK.",
      "label": "Package to install",
      "options": {
        "sdk": "SDK (contains runtime)",
        "runtime": "Runtime"
      },
      "type": "pickList",
      "required": false
    },
    {
      "defaultValue": false,
      "name": "useGlobalJson",
      "helpMarkDown": "Select this option to install all SDKs from global.json files. These files are searched from system.DefaultWorkingDirectory. You can change the search root path by setting working directory input.",
      "visibleRule": "packageType = sdk",
      "label": "Use global json",
      "type": "boolean",
      "required": false
    },
    {
      "name": "workingDirectory",
      "helpMarkDown": "Specify path from where global.json files should be searched when using `Use global json`. If empty, `system.DefaultWorkingDirectory` will be considered as the root path.",
      "visibleRule": "useGlobalJson = true",
      "label": "Working Directory",
      "type": "filePath",
      "required": "false"
    },
    {
      "defaultValue": "",
      "name": "version",
      "helpMarkDown": "Specify version of .NET Core SDK or runtime to install.<br/>Versions can be given in the following formats<li>2.x   => Install latest in major version.</li><li>2.2.x => Install latest in major and minor version</li><li>2.2.104 => Install exact version</li><br/>Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json",
      "visibleRule": "useGlobalJson = false || packageType = runtime",
      "label": "Version",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "",
      "name": "vsVersion",
      "helpMarkDown": "Specify version of compatible visual studio for which .NET core sdk to install. Specifiy complete vs-version like 16.6.4 containing major version, minor version and patch number.Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json)",
      "groupName": "advanced",
      "label": "Compatible Visual Studio version",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "false",
      "name": "includePreviewVersions",
      "helpMarkDown": "Select if you want preview versions to be included while searching for latest versions, such as while searching 2.2.x. This setting is ignored if you specify an exact version, such as: 3.0.100-preview3-010431",
      "visibleRule": "useGlobalJson = false  || packageType = runtime",
      "label": "Include Preview Versions",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "$(Agent.ToolsDirectory)/dotnet",
      "name": "installationPath",
      "helpMarkDown": "Specify where .Net Core SDK/Runtime should be installed. Different paths can have the following impact on .Net's behavior.<li>$(Agent.ToolsDirectory): This makes the version to be cached on the agent since this directory is not cleanup up across pipelines. All pipelines running on the agent, would have access to the versions installed previously using the agent.</li><li>$(Agent.TempDirectory): This can ensure that a pipeline doesn't use any cached version of .Net core since this folder is cleaned up after each pipeline.</li><li>Any other path: You can configure any other path given the agent process has access to the path. This will change the state of the machine and impact all processes running on it.<br/>Note that you can also configure Multi-Level Lookup setting which can configure .Net host's probing for a suitable version.",
      "groupName": "advanced",
      "label": "Path To Install .Net Core",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": false,
      "name": "performMultiLevelLookup",
      "helpMarkDown": "This input is only applicable to Windows based agents. This configures the behavior of .Net host process for looking up a suitable shared framework.<li>unchecked: Only versions present in the folder specified in this task would be looked by the host process.</li><li>checked: The host will attempt to look in pre-defined global locations using multi-level lookup.<br/>The default global locations are: <br/><b>For Windows:</b><br/>C:\\Program Files\\dotnet (64-bit processes)<br/>C:\\Program Files (x86)\\dotnet (32-bit process)</li> You can read more about it [**HERE**](https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/multilevel-sharedfx-lookup.md).<br/>",
      "groupName": "advanced",
      "label": "Perform Multi Level Lookup",
      "type": "boolean",
      "required": false
    }
  ],
  "demands": [],
  "messages": {
    "CopyingFilesIntoPath": "Copying root files (such as dotnet.exe) into installation path: %s",
    "VersionsFileMalformed": "The specified version's download links are not correctly formed in the supported versions document => %s/",
    "InvalidChannelObject": "Object cannot be used as Channel, required properties such as channel-version, releases.json is missing.",
    "ErrorWhileSettingDotNetToolPath": "Failed while prepending .Net Core Tool path to PATH envrionment variable. Error: %s",
    "ComparingInstalledFileVersions": "Comparing if version being installed %s is greater than already installed version with version complete file name %s",
    "ExtractingPackage": "Extracting downloaded package %s.",
    "VersionNotFound": "%s version matching: %s could not be found",
    "ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
    "DepricatedVersionNetCore": "NET Core version you specfied %s is out of support and will be removed from hosted agents soon. Please refer to https://aka.ms/dotnet-core-support for more information about the .NET support policy.",
    "LegacyPlatform": "Detected platform (Legacy): %s",
    "UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
    "ExplicitVersionRequired": "Version: %s is not allowed. Versions to be installed should be of format: major.minor.patchversion. For example: 2.2.1",
    "VersionIsNotLocalLatest": "Version: %s is not the latest among the versions present at %s",
    "CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
    "DetectingPlatform": "Detecting OS platform to find correct download package for the OS.",
    "ErrorWhileGettingVersionFromChannel": "Failed while getting version %s from channel %s with error: %s",
    "UnableToAccessPath": "Unable to access path: %s. Error: %s. Please make sure that agent process has access to the path.",
    "VersionIsLocalLatest": "Version: %s is the latest among the versions present at path: %s",
    "CreatingInstallationCompeleteFile": "Creating installation complete marker file for .Net core %s version %s",
    "VersionNotFoundInCache": "Version %s was not found in cache.",
    "MatchingVersionForUserInputVersion": "Found version %s in channel %s for user specified version spec: %s",
    "FailedToDownloadPackage": "Failed to download package for installation",
    "GlobalJsonIsEmpty": "global.json at path: %s is empty. No version is specified.",
    "UrlForReleaseChannelNotFound": "Could not find URL for releases.json of channel version: %s",
    "PathNotFoundException": "Path: %s could not be located/found. Make sure the path exists.",
    "PrependGlobalToolPath": "Creating global tool path and pre-pending to PATH.",
    "GlobalJsonFound": "Found a global.json at path: %s",
    "DownloadingUrl": "Downloading .NET Core package from URL: %s",
    "VersionFoundInCache": "Version: %s was found in cache.",
    "FailedWhileExtractingPacakge": "Failed while extracting downloaded package with error: %s",
    "FallingBackToAdjacentChannels": "Version %s could not be found in its channel, will now search in adjacent channels.",
    "CopyingFoldersIntoPath": "Copying all root folders into installation path: %s",
    "VersionNotAllowed": "Version %s is not allowed. Allowed version types are: majorVersion.x, majorVersion.minorVersion.x, majorVersion.minorVersion.patchVersion. More details: %s",
    "getDownloadUrlsFailed": "Failed to get download URLS. Error: %s.",
    "ToolFailed": "Tool install failed: %s",
    "MatchingVersionNotFound": "No matching %s version could be found for specified version: %s Kindly note the preview versions are only considered in latest version searches if Include Preview Versions checkbox is checked.",
    "InstallingNuGetVersion": "Installing NuGet version %s",
    "GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
    "ChannelVersionsNotComparable": "Channel versions %s and %s can not be compared. They both must have numeric major and minor versions.",
    "CheckingToolCache": "Checking if a cached copy exists for this version...",
    "CachingTool": "Caching this installed tool.",
    "runtimeVersionPropertyNotFound": "runtime-version property could not be found for .Net Core %s version %s.",
    "NoSuitableChannelWereFound": "Channel corresponding to version %s could not be found.",
    "ReleasesIndexBodyIncorrect": "Parsed releases index body is not correct. Kindly see if the releases-index section is not empty in the file.",
    "InvalidVersionObject": "Releases.json has a release with invalid %s object: %s",
    "RequiredChannelVersionForSpec": "Finding channel %s for version %s",
    "VersionNumberHasTheWrongFormat": "The version number: %s doesn't have the correct format. Versions can be given in the following formats: 2.x   => Install latest in major version. 2.2.x => Install latest in major and minor version. 2.2.104 => Install exact version. Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json",
    "getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
    "PrimaryPlatform": "Detected platform (Primary): %s",
    "OnlyExplicitVersionAllowed": "Only explicit versions and accepted, such as: 2.2.301. Version: %s is not valid.",
    "ToolToInstall": "Tool to install: .NET Core %s version %s.",
    "LookingForVersionInChannel": "Searching for version in channel %s",
    "SupportPhaseNotPresentInChannel": "support-phase is not present in the channel with channel-version %s.",
    "GlobalJsonSdkVersion": "SDK version: %s is specified by global.json at path: %s",
    "VersionsCanNotBeCompared": "Versions %s and %s cannot be compared. Both versions should be explicit.",
    "FileNameNotCorrectCompleteFileName": "File name %s is not a correct '.complete' file.",
    "SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
    "FailedToFindGlobalJson": "Failed to find global.json at and inside path: %s",
    "FailureWhileInstallingNuGetVersion": "Failed while installing NuGet version. Error: %s",
    "FailedInDetectingMachineArch": "Failed while detecting machine OS platform with error: %s",
    "SettingUpNugetProxySettings": "Setting up proxy configuration for NuGet.",
    "InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
    "ComparingInstalledFolderVersions": "Comparing if version being installed %s is greater than already installed version with folder name %s",
    "InvalidVersion": "Invalid version specified %s",
    "NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
    "FailedToReadGlobalJson": "The global.json at path: '%s' has the wrong format. For information about global.json, visit here: https://docs.microsoft.com/en-us/dotnet/core/tools/global-json. Error while trying to read: %s",
    "VersionCanNotBeDownloadedFromUrl": "Version: %s cannot be downloaded from URL: %s. Either the URL or version is incorrect.",
    "VersionInformationNotComplete": "Version: %s required information is not complete in releases.json file. Error: %s",
    "ExceptionWhileDownloadOrReadReleasesIndex": "Failed to download or parse releases-index.json with error: %s",
    "DownloadUrlForMatchingOsNotFound": "Download URL for .Net Core %s version %s could not be found for the following OS platforms (rid): %s",
    "FilesDataIsIncorrectInVersion": "In release %s for version %s, File data is incorrect (might have missing required fields, such as name, rid and url): %s",
    "VersionFilesDataIncorrect": "Version's files data is missing or has missing required fields.",
    "CouldNotDetectPlatform": "Could not detect the machine's OS",
    "FailedWhileInstallingVersionAtPath": "Failed while installing version: %s at path: %s with error: %s",
    "FailedToCopyTopLevelFiles": "Failed to copy root files into installation path: %s. Error: %s",
    "CannotFindRuntimeVersionForCompletingInstallation": "Cannot find runtime version for package type: %s with version: %s"
  },
  "id": "47d193c8-164a-5ba1-8231-f37a0e1da92b",
  "author": "Microsoft Corporation",
  "execution": {
    "Node10": {
      "target": "usedotnet.js"
    }
  },
  "instanceNameFormat": "Use .NET Core $(packageType) $(version)",
  "groups": [
    {
      "isExpanded": true,
      "displayName": "Advanced",
      "name": "advanced"
    }
  ],
  "helpMarkDown": "[Learn more about this task](https://aka.ms/AA4xgy0)",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "category": "Tool",
  "minimumAgentVersion": "2.144.0",
  "ecosystem": "dotnet",
  "satisfies": [
    "DotNetCore"
  ],
  "name": "UseDotNet-sxs",
  "description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support."
}
