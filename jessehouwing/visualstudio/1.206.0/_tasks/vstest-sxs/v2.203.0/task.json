{
  "releaseNotes": "<ul><li><b>Run tests using an agent job:</b> Unified agent across Build, Release and Test allows for automation agents to be used for testing purposes as well. You can distribute tests using the multi-agent job setting. The multi-config job setting can be used to replicate tests in different configurations. <a href=\"https://aka.ms/testingwithphases\" target=\"_blank\">More information</a></li><li><b>Test Impact Analysis:</b> Automatically select and run only the tests needed to validate the code change.</li><li>Use the <b>Visual Studio Test Platform Installer task</b> to run tests without needing a full Visual Studio installation.</li></ul>",
  "friendlyName": "Visual Studio Test (Side-by-side)",
  "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/test/vstest",
  "version": {
    "Patch": 0,
    "Major": 2,
    "Minor": 203
  },
  "inputs": [
    {
      "label": "Select tests using",
      "name": "testSelector",
      "defaultValue": "testAssemblies",
      "groupName": "testSelection",
      "required": true,
      "type": "pickList",
      "helpMarkDown": "<ul><li><b>Test assembly: </b>Use this option to specify one or more test assemblies that contain your tests. You can optionally specify a filter criteria to select only specific tests.</li><li><b>Test plan: </b>Use this option to run tests from your test plan that have an automated test method associated with it.</li><li><b>Test run: </b>Use this option when you are setting up an environment to run tests from the Test hub. This option should not be used when running tests in a continuous integration / continuous deployment (CI/CD) pipeline.</li>",
      "options": {
        "testPlan": "Test plan",
        "testRun": "Test run",
        "testAssemblies": "Test assemblies"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "visibleRule": "testSelector = testAssemblies",
      "label": "Test files",
      "name": "testAssemblyVer2",
      "defaultValue": "**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**",
      "groupName": "testSelection",
      "required": true,
      "type": "multiLine",
      "helpMarkDown": "Run tests from the specified files.<br>Ordered tests and webtests can be run by specifying the .orderedtest and .webtest files respectively. To run .webtest, Visual Studio 2017 Update 4 or higher is needed. <br><br>The file paths are relative to the search folder. Supports multiple lines of minimatch patterns. [More information](https://aka.ms/minimatchexamples)",
      "properties": {
        "rows": "3",
        "resizable": "true"
      }
    },
    {
      "visibleRule": "testSelector = testPlan",
      "label": "Test plan",
      "name": "testPlan",
      "defaultValue": "",
      "groupName": "testSelection",
      "required": true,
      "type": "pickList",
      "helpMarkDown": "Select a test plan containing test suites with automated test cases.",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      }
    },
    {
      "visibleRule": "testSelector = testPlan",
      "label": "Test suite",
      "name": "testSuite",
      "defaultValue": "",
      "groupName": "testSelection",
      "required": true,
      "type": "pickList",
      "helpMarkDown": "Select one or more test suites containing automated test cases. Test case work items must be associated with an automated test method. [Learn more.](https://go.microsoft.com/fwlink/?linkid=847773",
      "properties": {
        "EditableOptions": "True",
        "DisableManageLink": "True",
        "MultiSelect": "True"
      }
    },
    {
      "visibleRule": "testSelector = testPlan",
      "label": "Test configuration",
      "name": "testConfiguration",
      "defaultValue": "",
      "groupName": "testSelection",
      "required": true,
      "type": "pickList",
      "helpMarkDown": "Select Test Configuration.",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      }
    },
    {
      "visibleRule": "testSelector = testRun",
      "label": "Test Run",
      "name": "tcmTestRun",
      "defaultValue": "$(test.RunId)",
      "groupName": "testSelection",
      "required": false,
      "type": "string",
      "helpMarkDown": "Test run based selection is used when triggering automated test runs from the test hub. This option cannot be used for running tests in the CI/CD pipeline.",
      "properties": {
        "rows": "3",
        "resizable": "true"
      }
    },
    {
      "defaultValue": "$(System.DefaultWorkingDirectory)",
      "name": "searchFolder",
      "helpMarkDown": "Folder to search for the test assemblies.",
      "groupName": "testSelection",
      "label": "Search folder",
      "type": "string",
      "required": true
    },
    {
      "defaultValue": "$(Agent.TempDirectory)\\TestResults",
      "name": "resultsFolder",
      "helpMarkDown": "Folder to store test results. When this input is not specified, results are stored in $(Agent.TempDirectory)/TestResults by default, which is cleaned at the end of a pipeline run. The results directory will always be cleaned up at the start of the vstest task before the tests are run. Relative folder path if provided will be considered relative to $(Agent.TempDirectory)",
      "groupName": "testSelection",
      "label": "Test results folder",
      "type": "string",
      "required": false
    },
    {
      "name": "testFiltercriteria",
      "visibleRule": "testSelector = testAssemblies",
      "required": false,
      "defaultValue": "",
      "label": "Test filter criteria",
      "groupName": "testSelection",
      "type": "string",
      "helpMarkDown": "Additional criteria to filter tests from Test assemblies. For example: `Priority=1|Name=MyTestMethod`. [More information](https://msdn.microsoft.com/en-us/library/jj155796.aspx)"
    },
    {
      "name": "runOnlyImpactedTests",
      "visibleRule": "testSelector = testAssemblies",
      "required": false,
      "defaultValue": "False",
      "label": "Run only impacted tests",
      "groupName": "testSelection",
      "type": "boolean",
      "helpMarkDown": "Automatically select, and run only the tests needed to validate the code change. [More information](https://aka.ms/tialearnmore)"
    },
    {
      "name": "runAllTestsAfterXBuilds",
      "visibleRule": "testSelector = testAssemblies && runOnlyImpactedTests = true",
      "required": false,
      "defaultValue": "50",
      "label": "Number of builds after which all tests should be run",
      "groupName": "testSelection",
      "type": "string",
      "helpMarkDown": "Number of builds after which to automatically run all tests. Test Impact Analysis stores the mapping between test cases and source code. It is recommended to regenerate the mapping by running all tests, on a regular basis."
    },
    {
      "defaultValue": "false",
      "name": "uiTests",
      "helpMarkDown": "To run UI tests, ensure that the agent is set to run in interactive mode. Setting up an agent to run interactively must be done before queueing the build / release. Checking this box does <b>not</b> configure the agent in interactive mode automatically. This option in the task is to only serve as a reminder to configure agent appropriately to avoid failures. <br><br> Hosted Windows agents from the VS 2015 and 2017 pools can be used to run UI tests.<br> [More information](https://aka.ms/uitestmoreinfo).",
      "groupName": "testSelection",
      "label": "Test mix contains UI tests",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "version",
      "name": "vstestLocationMethod",
      "groupName": "executionOptions",
      "label": "Select test platform using",
      "options": {
        "version": "Version",
        "location": "Specific location"
      },
      "type": "radio",
      "required": false
    },
    {
      "visibleRule": "vstestLocationMethod = version",
      "label": "Test platform version",
      "name": "vsTestVersion",
      "defaultValue": "latest",
      "groupName": "executionOptions",
      "required": false,
      "type": "pickList",
      "helpMarkDown": "The version of Visual Studio test to use. If latest is specified it chooses Visual Studio 2017 or Visual Studio 2015 depending on what is installed. Visual Studio 2013 is not supported. To run tests without needing Visual Studio on the agent, use the ‘Installed by tools installer’ option. Be sure to include the ‘Visual Studio Test Platform Installer’ task to acquire the test platform from nuget.",
      "options": {
        "latest": "Latest",
        "15.0": "Visual Studio 2017",
        "16.0": "Visual Studio 2019",
        "14.0": "Visual Studio 2015",
        "toolsInstaller": "Installed by Tools Installer"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "groupName": "executionOptions",
      "name": "vstestLocation",
      "visibleRule": "vstestLocationMethod = location",
      "required": false,
      "label": "Path to vstest.console.exe",
      "defaultValue": "",
      "type": "string",
      "helpMarkDown": "Optionally supply the path to VSTest."
    },
    {
      "defaultValue": "",
      "name": "runSettingsFile",
      "helpMarkDown": "Path to runsettings or testsettings file to use with the tests.",
      "groupName": "executionOptions",
      "label": "Settings file",
      "type": "filePath",
      "required": false
    },
    {
      "groupName": "executionOptions",
      "name": "overrideTestrunParameters",
      "required": false,
      "properties": {
        "editorExtension": "ms.vss-services-azure.parameters-grid",
        "resizable": "true",
        "rows": "3"
      },
      "label": "Override test run parameters",
      "defaultValue": "",
      "type": "multiLine",
      "helpMarkDown": "Override parameters defined in the `TestRunParameters` section of runsettings file or `Properties` section of testsettings file. For example: `-key1 value1 -key2 value2`. Note: Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher "
    },
    {
      "defaultValue": "",
      "name": "pathtoCustomTestAdapters",
      "helpMarkDown": "Directory path to custom test adapters. Adapters residing in the same folder as the test assemblies are automatically discovered.",
      "groupName": "executionOptions",
      "label": "Path to custom test adapters",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "False",
      "name": "runInParallel",
      "helpMarkDown": "If set, tests will run in parallel leveraging available cores of the machine. This will override the MaxCpuCount if specified in your runsettings file. [Click here](https://aka.ms/paralleltestexecution) to learn more about how tests are run in parallel.",
      "groupName": "executionOptions",
      "label": "Run tests in parallel on multi-core machines",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "False",
      "name": "runTestsInIsolation",
      "helpMarkDown": "Runs the tests in an isolated process. This makes vstest.console.exe process less likely to be stopped on an error in the tests, but tests might run slower. This option currently cannot be used when running with the multi-agent job setting.",
      "groupName": "executionOptions",
      "label": "Run tests in isolation",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "False",
      "name": "codeCoverageEnabled",
      "helpMarkDown": "Collect code coverage information from the test run.",
      "groupName": "executionOptions",
      "label": "Code coverage enabled",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "",
      "name": "otherConsoleOptions",
      "helpMarkDown": "Other console options that can be passed to vstest.console.exe, as documented <a href=\"https://aka.ms/vstestotherconsoleoptions\" target=\"_blank\">here</a>. <p>These options are not supported and will be ignored when running tests using the ‘Multi agent’ parallel setting of an agent job or when running tests using ‘Test plan’ or 'Test run' option or when a custom batching option is selected. The options can be specified using a settings file instead.</p>",
      "groupName": "executionOptions",
      "label": "Other console options",
      "type": "string",
      "required": false
    },
    {
      "label": "Batch tests",
      "name": "distributionBatchType",
      "defaultValue": "basedOnTestCases",
      "groupName": "advancedExecutionOptions",
      "required": false,
      "type": "pickList",
      "helpMarkDown": "A batch is a group of tests. A batch of tests runs its tests at the same time and results are published for the batch. If the job in which the task runs is set to use multiple agents, each agent picks up any available batches of tests to run in parallel.<br><br><b>Based on the number of tests and agents:</b> Simple batching based on the number of tests and agents participating in the test run.<br><br><b>Based on past running time of tests:</b> This batching considers past running time to create batches of tests such that each batch has approximately equal running time.<br><br><b>Based on test assemblies:</b> Tests from an assembly are batched together.",
      "options": {
        "basedOnTestCases": "Based on number of tests and agents",
        "basedOnExecutionTime": "Based on past running time of tests",
        "basedOnAssembly": "Based on test assemblies"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "visibleRule": "distributionBatchType = basedOnTestCases",
      "label": "Batch options",
      "name": "batchingBasedOnAgentsOption",
      "defaultValue": "autoBatchSize",
      "groupName": "advancedExecutionOptions",
      "required": false,
      "type": "radio",
      "helpMarkDown": "Simple batching based on the number of tests and agents participating in the test run. When the batch size is automatically determined, each batch contains `(total number of tests / number of agents)` tests. If a batch size is specified, each batch will contain the specified number of tests.",
      "options": {
        "autoBatchSize": "Automatically determine the batch size",
        "customBatchSize": "Specify a batch size"
      }
    },
    {
      "name": "customBatchSizeValue",
      "visibleRule": "distributionBatchType = basedOnTestCases && batchingBasedOnAgentsOption = customBatchSize",
      "required": true,
      "defaultValue": "10",
      "label": "Number of tests per batch",
      "groupName": "advancedExecutionOptions",
      "type": "string",
      "helpMarkDown": "Specify batch size"
    },
    {
      "visibleRule": "distributionBatchType = basedOnExecutionTime",
      "label": "Batch options",
      "name": "batchingBasedOnExecutionTimeOption",
      "defaultValue": "autoBatchSize",
      "groupName": "advancedExecutionOptions",
      "required": false,
      "type": "radio",
      "helpMarkDown": "This batching considers past running time to create batches of tests such that each batch has approximately equal running time. Quick running tests will be batched together, while longer running tests may belong to a separate batch. When this option is used with the multi-agent job setting, total test time is reduced to a minimum.",
      "options": {
        "customTimeBatchSize": "Specify running time per batch",
        "autoBatchSize": "Automatically determine the batch time"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "customRunTimePerBatchValue",
      "visibleRule": "distributionBatchType = basedOnExecutionTime && batchingBasedOnExecutionTimeOption = customTimeBatchSize",
      "required": true,
      "defaultValue": "60",
      "label": "Running time (sec) per batch",
      "groupName": "advancedExecutionOptions",
      "type": "string",
      "helpMarkDown": "Specify the running time (sec) per batch"
    },
    {
      "defaultValue": "False",
      "name": "dontDistribute",
      "helpMarkDown": "Choosing this option will not distribute tests across agents when the task is running in a multi-agent job.<br>Each of the selected test(s) will be repeated on each agent.<br>The option is not applicable when the agent job is configured to run with no parallelism or with the multi-config option.",
      "groupName": "advancedExecutionOptions",
      "label": "Replicate tests instead of distributing when multiple agents are used in the job",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "",
      "name": "testRunTitle",
      "helpMarkDown": "Provide a name for the test run.",
      "groupName": "reportingOptions",
      "label": "Test run title",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "",
      "name": "platform",
      "helpMarkDown": "Build platform against which the tests should be reported. If you have defined a variable for platform in your build task, use that here.",
      "groupName": "reportingOptions",
      "label": "Build platform",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "",
      "name": "configuration",
      "helpMarkDown": "Build configuration against which the tests should be reported. If you have defined a variable for configuration in your build task, use that here.",
      "groupName": "reportingOptions",
      "label": "Build configuration",
      "type": "string",
      "required": false
    },
    {
      "defaultValue": "true",
      "name": "publishRunAttachments",
      "helpMarkDown": "Opt in/out of publishing run level attachments.",
      "groupName": "reportingOptions",
      "label": "Upload test attachments",
      "type": "boolean",
      "required": false
    },
    {
      "defaultValue": "False",
      "name": "failOnMinTestsNotRun",
      "helpMarkDown": "Selecting this option will fail the task if specified minimum number of tests is not run.",
      "groupName": "reportingOptions",
      "label": "Fail the task if a minimum number of tests are not run.",
      "type": "boolean",
      "required": false
    },
    {
      "name": "minimumExpectedTests",
      "visibleRule": "failOnMinTestsNotRun = true",
      "required": false,
      "defaultValue": "1",
      "label": "Minimum # of tests",
      "groupName": "reportingOptions",
      "type": "string",
      "helpMarkDown": "Specify the minimum # of tests that should be run for the task to succeed. Total tests executed is calculated as the sum of passed, failed and aborted tests."
    },
    {
      "defaultValue": "false",
      "name": "diagnosticsEnabled",
      "helpMarkDown": "Collect advanced diagnostics in case of catastrophic failures.",
      "groupName": "executionOptions",
      "label": "Collect advanced diagnostics in case of catastrophic failures",
      "type": "boolean",
      "required": false
    },
    {
      "visibleRule": "diagnosticsEnabled = true",
      "label": "Collect process dump and attach to test run report",
      "name": "collectDumpOn",
      "defaultValue": "onAbortOnly",
      "groupName": "executionOptions",
      "required": false,
      "type": "pickList",
      "helpMarkDown": "Collect process dump and attach to test run report.",
      "options": {
        "onAbortOnly": "On abort only",
        "always": "Always",
        "never": "Never"
      }
    },
    {
      "defaultValue": "False",
      "name": "rerunFailedTests",
      "helpMarkDown": "Selecting this option will rerun any failed tests until they pass or the maximum # of attempts is reached.",
      "groupName": "executionOptions",
      "label": "Rerun failed tests",
      "type": "boolean",
      "required": false
    },
    {
      "visibleRule": "rerunFailedTests = true",
      "label": "Do not rerun if test failures exceed specified threshold",
      "name": "rerunType",
      "defaultValue": "basedOnTestFailurePercentage",
      "groupName": "executionOptions",
      "required": false,
      "type": "pickList",
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures.<br>You can specify % failures or # of failed tests as a threshold.",
      "options": {
        "basedOnTestFailureCount": "# of failed tests",
        "basedOnTestFailurePercentage": "% failure"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "rerunFailedThreshold",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailurePercentage",
      "required": false,
      "defaultValue": "30",
      "label": "% failure",
      "groupName": "executionOptions",
      "type": "string",
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures."
    },
    {
      "name": "rerunFailedTestCasesMaxLimit",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailureCount",
      "required": false,
      "defaultValue": "5",
      "label": "# of failed tests",
      "groupName": "executionOptions",
      "type": "string",
      "helpMarkDown": "Use this option to avoid rerunning tests when number of failed test cases crosses specified limit. This is applicable if any environment issues leads to massive failures."
    },
    {
      "name": "rerunMaxAttempts",
      "visibleRule": "rerunFailedTests = true",
      "required": false,
      "defaultValue": "3",
      "label": "Maximum # of attempts",
      "groupName": "executionOptions",
      "type": "string",
      "helpMarkDown": "Specify the maximum # of times a failed test should be retried. If a test passes before the maximum # of attempts is reached, it will not be rerun further."
    }
  ],
  "demands": [
    "vstest"
  ],
  "messages": {
    "pathToCustomAdaptersContainsNoAdapters": "Path to custom adapters '%s' does not contain any test adapters, provide a valid path.",
    "InvalidSettingsFile": "The specified settings file %s is invalid or does not exist. Provide a valid settings file or clear the field.",
    "UpdateThreeOrHigherRequired": "Install Visual Studio 2015 Update 3 or higher on your build agent machine to run the tests in parallel.",
    "testRunIdInput": "Test run Id : '%s'",
    "testFilterCriteriaInput": "Test filter criteria : %s",
    "testAssembliesSelector": "Test assemblies",
    "vstestVersionInvalid": "Given test platform version %s is not supported.",
    "vsVersionSelected": "VisualStudio version selected for test execution : %s",
    "ErrorWhileSettingTestImpactCollectorTestSettings": "Error occurred while setting Test Impact Collector in test settings file.",
    "VstestDiagNotSupported": "vstest.console.exe version does not support the /diag flag. Enable diagnostics via the exe.config files",
    "invalidTestBatchSize": "Invalid batch size provided: %s",
    "runSettingsFileInput": "Run settings file : %s",
    "ErrorWhileReadingTestSettings": "Error occurred while reading test settings file. Error : %s.",
    "runInIsolationInput": "Run in isolation : %s",
    "ErrorWhileListingDiscoveredTests": "Error occurred while discovering the tests. All the tests will be executed for this run.",
    "uitestsparallel": "Running UI tests in parallel on the same machine can lead to errors. Consider disabling the ‘run in parallel’ option or run UI tests using a separate task. To learn more, see https://aka.ms/paralleltestexecution ",
    "testSourcesFilteringFailed": "Preparing the test sources file failed. Error : %s",
    "VstestFailedReturnCode": "VsTest task failed.",
    "ErrorWhileReadingRunSettings": "Error occurred while reading run settings file. Error : %s.",
    "testAssemblyFilterInput": "Test assemblies : %s",
    "PublishCodeChangesPerfTime": "Total time taken to publish code changes: %d milliseconds.",
    "testSuiteSelected": "Test suite Id selected: %s",
    "configureDtaAgentFailed": "Configuring the test agent with the server failed even after %d retries with error %s",
    "OnlyWindowsOsSupported": "This task is supported only on Windows agents and cannot be used on other platforms.",
    "ToolsInstallerInstallationError": "The Visual Studio Test Platform tools installer did not run or did not complete the installation successfully, please refer to the following blog for information on how to use the tools installer: https://aka.ms/vstesttoolsinstaller",
    "noTestSourcesFound": "No test sources found matching the given filter '%s'",
    "NoIncludePatternFound": "No include pattern found. Specify at least one include pattern to search test assemblies.",
    "ErrorWhileSettingTestImpactCollectorRunSettings": "Error occurred while setting Test Impact Collector in run settings file.",
    "VstestTIANotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 RC or above to run Test Impact Analysis.",
    "NoTestResultsDirectoryFound": "Test results directory not found.",
    "diagnosticsInput": "Diagnostics enabled : %s",
    "NoMatchingTestAssemblies": "No test assemblies found matching the pattern: %s.",
    "overrideNotSupported": "Overriding test run parameters is supported only with valid runsettings or testsettings file. This option will be ignored.",
    "runTestsLocally": "Run the tests locally using %s",
    "invalidRerunMaxAttempts": "Invalid/Exceeded rerun maximum attempts, defaulting to 3",
    "VideoCollectorNotSupportedWithRunSettings": "Video collector is not supported with run settings.",
    "searchLocationNotDirectory": "Search folder: '%s' should be a directory and it should exist.",
    "invalidRunTimePerBatch": "Invalid 'Running time (sec) per batch': %s",
    "ErrorWhileUpdatingResponseFile": "Error occurred while updating the response file '%s'. All the tests will be executed for this run.",
    "testplanConfigInput": "Test plan configuration Id : %s",
    "testSettingPropertiesNotSupported": "Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher",
    "VsTestVersionEmpty": "VsTestVersion is null or empty",
    "NoVstestFound": "Test platform is not found. Try again after installing it on your build agent machine.",
    "LookingForVsInstalltion": "Attempting to find vstest.console from a visual studio installation with version %s.",
    "pathToCustomAdaptersInput": "Path to custom adapters : %s",
    "rerunNotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 to rerun failed tests.",
    "runInParallelInput": "Run in parallel : %s",
    "UnexpectedVersionNumber": "Unexpected version number detected for vstest.console.exe: %s.",
    "VstestLocationDoesNotExist": "The location of 'vstest.console.exe' specified '%s' does not exist.",
    "codeCoverageInput": "Code coverage enabled : %s",
    "pathToCustomAdaptersInvalid": "Path to custom adapters '%s' should be a directory and it should exist.",
    "rerunMaxAttempts": "Rerun maximum attempts: %s",
    "VstestNotFound": "Visual Studio %d is not found. Try again with a version that exists on your build agent machine.",
    "UnableToGetFeatureFlag": "Unable to get feature flag: %s",
    "UploadTestResultsPerfTime": "Total time taken to upload test results: %d milliseconds.",
    "rerunFailedTests": "Rerun failed tests: %s",
    "testRunIdInvalid": "The test selection is 'Test run', but the test run ID '%s' given is invalid",
    "testSelectorInput": "Test selector : %s",
    "numberOfTestCasesPerSlice": "Number of test cases per batch : %s",
    "GenerateResponseFilePerfTime": "Total time taken to get response file: %d milliseconds.",
    "UncPathNotSupported": "Path to test sources search folder cannot be a UNC path. Please provide a rooted path or a path relative to $(System.DefaultWorkingDirectory).",
    "UserProvidedSourceFilter": "Source filter: %s",
    "UpgradeAgentMessage": "Please upgrade your agent version. https://github.com/Microsoft/vsts-agent/releases",
    "testRunSelector": "Test run",
    "VstestFailed": "Vstest failed with error. Check logs for failures. There might be failed tests.",
    "VstestPassedReturnCode": "VsTest task succeeded.",
    "invalidRerunFailedThreshold": "Invalid rerun failed tests threshold, defaulting to 30%",
    "runTestInIsolationNotSupported": "Running tests in isolation is not supported when using the multi-agent job setting. This option will be ignored.",
    "rerunFailedThreshold": "Rerun failed tests threshold: %s",
    "actionOnThresholdNotMet": "Action when minimum tests threshold not met : %s",
    "RunInParallelNotSupported": "Running tests in parallel on multi-core machines is not supported with testsettings file. This option will be ignored.",
    "ErrorWhilePublishingCodeChanges": "Error occurred while publishing the code changes. All the tests will be executed for this run.",
    "minTestsNotExecuted": "The specified minimum number of tests %d were not executed in the test run.",
    "minimumExpectedTests": "Minimum tests expected to be run: %d",
    "otherConsoleOptionsInput": "Other console options : %s",
    "nonDistributedTestWorkflow": "Running tests using vstest.console.exe runner.",
    "vstestLocationSpecified": "%s, specified location : %s",
    "ErrorReadingVstestVersion": "Error reading the version of vstest.console.exe.",
    "MultiConfigNotSupportedWithOnDemand": "On demand runs are not supported with Multi-Configuration option. Please use 'None' or 'Multi-agent' parallelism option.",
    "toolsInstallerPathNotSet": "VsTest Test Platform folder was not found in cache.",
    "rerunFailedTestCasesMaxLimit": "Rerun maximum failed test case limit: %s",
    "NoResultsToPublish": "No results found to publish.",
    "UnexpectedVersionString": "Unexpected version string detected for vstest.console.exe: %s.",
    "DontShowWERUIDisabledWarning": "Windows Error Reporting DontShowUI not set, if the windows error dialog pops-up in the middle of UI test execution than the test will hang",
    "LookingForBuildToolsInstalltion": "Attempting to find vstest.console from a visual studio build tools installation with version %s.",
    "minimumRunTimePerBatchWarning": "'Running time (seconds) per batch' should be at least '%s' seconds. Defaulting to the minimum supported value.",
    "RunTimePerBatch": "Run time per batch(sec) : %s",
    "invalidRerunFailedTestCasesMaxLimit": "Invalid rerun failed tests case limit, defaulting to 5",
    "ErrorWhileCreatingResponseFile": "Error occurred while creating the response file. All the tests will be executed for this run.",
    "dtaNumberOfAgents": "Distributed test execution, number of agents in job : %s",
    "disabledRerun": "Disabling the rerun of failed tests as the rerun threshold provided is %s",
    "testPlanSelector": "Test plan",
    "testPlanInput": "Test plan Id : %s",
    "testImpactAndCCWontWork": "Test Impact (Run only Impacted tests) and Code Coverage data collector will not work.",
    "ErrorOccuredWhileSettingRegistry": "Error occurred while setting registry key, Error: %s.",
    "searchFolderInput": "Search folder : %s",
    "OverrideUseVerifiableInstrumentation": "Overriding UseVerifiableInstrumentation field to false in the runsettings file.",
    "ErrorWhileUpdatingSettings": "Error occurred while updating the settings file. Using the specified settings file.",
    "distributedTestWorkflow": "In distributed testing flow",
    "noVstestConsole": "Tests will not be executed with vstest console. Install Visual Studio 2017 RC or above to run tests via vstest console.",
    "otherConsoleOptionsNotSupported": "Other console options is not supported for this task configuration. This option will be ignored."
  },
  "id": "d962a10a-eaad-5083-bb69-0f4d57094a9a",
  "author": "Microsoft Corporation",
  "execution": {
    "Node": {
      "target": "runvstest.js"
    }
  },
  "dataSourceBindings": [
    {
      "callbackContextTemplate": "{\"skip\": \"{{add skip 1000}}\"}",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans?filterActivePlans=true&api-version=3.0-preview.2&$skip={{skip}}&$top=1000",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }",
      "endpointId": "tfs:teamfoundation",
      "target": "testPlan",
      "resultSelector": "jsonpath:$.value[*]",
      "callbackRequiredTemplate": "{{isEqualNumber result.count 1000}}",
      "initialContextTemplate": "{\"skip\": \"0\"}"
    },
    {
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/configurations?api-version=3.0-preview.1",
      "target": "testConfiguration",
      "resultSelector": "jsonpath:$.value[*]",
      "endpointId": "tfs:teamfoundation",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }"
    },
    {
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans/{{testPlan}}/suites?$asTreeView=true&api-version=3.0-preview.2",
      "target": "testSuite",
      "resultSelector": "jsonpath:$.value[*]",
      "endpointId": "tfs:teamfoundation",
      "parameters": {
        "testPlan": "$(testPlan)"
      }
    }
  ],
  "instanceNameFormat": "VsTest - $(testSelector)",
  "groups": [
    {
      "isExpanded": true,
      "displayName": "Test selection",
      "name": "testSelection"
    },
    {
      "isExpanded": true,
      "displayName": "Execution options",
      "name": "executionOptions"
    },
    {
      "isExpanded": false,
      "displayName": "Advanced execution options",
      "name": "advancedExecutionOptions"
    },
    {
      "isExpanded": true,
      "displayName": "Reporting options",
      "name": "reportingOptions"
    }
  ],
  "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkId=835764)",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "visibility": [
    "Build",
    "Release"
  ],
  "minimumAgentVersion": "2.103.0",
  "category": "Test",
  "name": "VSTest-sxs",
  "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2)."
}
