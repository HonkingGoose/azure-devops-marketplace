{
  "id": "d962a10a-eaad-5083-bb69-0f4d57094a9a",
  "instanceNameFormat": "VsTest - $(testSelector)",
  "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
  "version": {
    "Major": 2,
    "Minor": 205,
    "Patch": 0
  },
  "friendlyName": "Visual Studio Test (Side-by-side)",
  "demands": [
    "vstest"
  ],
  "messages": {
    "VstestPassedReturnCode": "VsTest task succeeded.",
    "testPlanSelector": "Test plan",
    "VstestFailed": "Vstest failed with error. Check logs for failures. There might be failed tests.",
    "VstestFailedReturnCode": "VsTest task failed.",
    "OnlyWindowsOsSupported": "This task is supported only on Windows agents and cannot be used on other platforms.",
    "UpdateThreeOrHigherRequired": "Install Visual Studio 2015 Update 3 or higher on your build agent machine to run the tests in parallel.",
    "ErrorOccuredWhileSettingRegistry": "Error occurred while setting registry key, Error: %s.",
    "searchLocationNotDirectory": "Search folder: '%s' should be a directory and it should exist.",
    "rerunFailedTests": "Rerun failed tests: %s",
    "pathToCustomAdaptersInvalid": "Path to custom adapters '%s' should be a directory and it should exist.",
    "InvalidSettingsFile": "The specified settings file %s is invalid or does not exist. Provide a valid settings file or clear the field.",
    "vstestVersionInvalid": "Given test platform version %s is not supported.",
    "DontShowWERUIDisabledWarning": "Windows Error Reporting DontShowUI not set, if the windows error dialog pops-up in the middle of UI test execution than the test will hang",
    "minimumExpectedTests": "Minimum tests expected to be run: %d",
    "ErrorWhileSettingTestImpactCollectorTestSettings": "Error occurred while setting Test Impact Collector in test settings file.",
    "runSettingsFileInput": "Run settings file : %s",
    "UnexpectedVersionNumber": "Unexpected version number detected for vstest.console.exe: %s.",
    "ErrorWhileListingDiscoveredTests": "Error occurred while discovering the tests. All the tests will be executed for this run.",
    "invalidRunTimePerBatch": "Invalid 'Running time (sec) per batch': %s",
    "disabledRerun": "Disabling the rerun of failed tests as the rerun threshold provided is %s",
    "codeCoverageInput": "Code coverage enabled : %s",
    "UpgradeAgentMessage": "Please upgrade your agent version. https://github.com/Microsoft/vsts-agent/releases",
    "UnableToGetFeatureFlag": "Unable to get feature flag: %s",
    "testRunIdInvalid": "The test selection is 'Test run', but the test run ID '%s' given is invalid",
    "UploadTestResultsPerfTime": "Total time taken to upload test results: %d milliseconds.",
    "ErrorReadingVstestVersion": "Error reading the version of vstest.console.exe.",
    "rerunNotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 to rerun failed tests.",
    "numberOfTestCasesPerSlice": "Number of test cases per batch : %s",
    "toolsInstallerPathNotSet": "VsTest Test Platform folder was not found in cache.",
    "vstestLocationSpecified": "%s, specified location : %s",
    "otherConsoleOptionsNotSupported": "Other console options is not supported for this task configuration. This option will be ignored.",
    "RunTimePerBatch": "Run time per batch(sec) : %s",
    "runTestInIsolationNotSupported": "Running tests in isolation is not supported when using the multi-agent job setting. This option will be ignored.",
    "actionOnThresholdNotMet": "Action when minimum tests threshold not met : %s",
    "NoTestResultsDirectoryFound": "Test results directory not found.",
    "dtaNumberOfAgents": "Distributed test execution, number of agents in job : %s",
    "searchFolderInput": "Search folder : %s",
    "rerunFailedTestCasesMaxLimit": "Rerun maximum failed test case limit: %s",
    "rerunMaxAttempts": "Rerun maximum attempts: %s",
    "diagnosticsInput": "Diagnostics enabled : %s",
    "testFilterCriteriaInput": "Test filter criteria : %s",
    "VstestDiagNotSupported": "vstest.console.exe version does not support the /diag flag. Enable diagnostics via the exe.config files",
    "testRunIdInput": "Test run Id : '%s'",
    "testPlanInput": "Test plan Id : %s",
    "ErrorWhileUpdatingSettings": "Error occurred while updating the settings file. Using the specified settings file.",
    "NoVstestFound": "Test platform is not found. Try again after installing it on your build agent machine.",
    "pathToCustomAdaptersContainsNoAdapters": "Path to custom adapters '%s' does not contain any test adapters, provide a valid path.",
    "pathToCustomAdaptersInput": "Path to custom adapters : %s",
    "ErrorWhileSettingTestImpactCollectorRunSettings": "Error occurred while setting Test Impact Collector in run settings file.",
    "VstestLocationDoesNotExist": "The location of 'vstest.console.exe' specified '%s' does not exist.",
    "ToolsInstallerInstallationError": "The Visual Studio Test Platform tools installer did not run or did not complete the installation successfully, please refer to the following blog for information on how to use the tools installer: https://aka.ms/vstesttoolsinstaller",
    "uitestsparallel": "Running UI tests in parallel on the same machine can lead to errors. Consider disabling the ‘run in parallel’ option or run UI tests using a separate task. To learn more, see https://aka.ms/paralleltestexecution ",
    "UserProvidedSourceFilter": "Source filter: %s",
    "otherConsoleOptionsInput": "Other console options : %s",
    "RunInParallelNotSupported": "Running tests in parallel on multi-core machines is not supported with testsettings file. This option will be ignored.",
    "invalidRerunFailedThreshold": "Invalid rerun failed tests threshold, defaulting to 30%",
    "ErrorWhileReadingRunSettings": "Error occurred while reading run settings file. Error : %s.",
    "distributedTestWorkflow": "In distributed testing flow",
    "VideoCollectorNotSupportedWithRunSettings": "Video collector is not supported with run settings.",
    "invalidTestBatchSize": "Invalid batch size provided: %s",
    "testAssemblyFilterInput": "Test assemblies : %s",
    "VstestTIANotSupported": "Install Visual Studio 2015 update 3 or Visual Studio 2017 RC or above to run Test Impact Analysis.",
    "testSettingPropertiesNotSupported": "Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher",
    "noTestSourcesFound": "No test sources found matching the given filter '%s'",
    "minTestsNotExecuted": "The specified minimum number of tests %d were not executed in the test run.",
    "GenerateResponseFilePerfTime": "Total time taken to get response file: %d milliseconds.",
    "overrideNotSupported": "Overriding test run parameters is supported only with valid runsettings or testsettings file. This option will be ignored.",
    "VstestNotFound": "Visual Studio %d is not found. Try again with a version that exists on your build agent machine.",
    "NoIncludePatternFound": "No include pattern found. Specify at least one include pattern to search test assemblies.",
    "NoMatchingTestAssemblies": "No test assemblies found matching the pattern: %s.",
    "testRunSelector": "Test run",
    "nonDistributedTestWorkflow": "Running tests using vstest.console.exe runner.",
    "testSourcesFilteringFailed": "Preparing the test sources file failed. Error : %s",
    "testSuiteSelected": "Test suite Id selected: %s",
    "runInIsolationInput": "Run in isolation : %s",
    "MultiConfigNotSupportedWithOnDemand": "On demand runs are not supported with Multi-Configuration option. Please use 'None' or 'Multi-agent' parallelism option.",
    "testSelectorInput": "Test selector : %s",
    "UncPathNotSupported": "Path to test sources search folder cannot be a UNC path. Please provide a rooted path or a path relative to $(System.DefaultWorkingDirectory).",
    "PublishCodeChangesPerfTime": "Total time taken to publish code changes: %d milliseconds.",
    "NoResultsToPublish": "No results found to publish.",
    "runTestsLocally": "Run the tests locally using %s",
    "testImpactAndCCWontWork": "Test Impact (Run only Impacted tests) and Code Coverage data collector will not work.",
    "VsTestVersionEmpty": "VsTestVersion is null or empty",
    "configureDtaAgentFailed": "Configuring the test agent with the server failed even after %d retries with error %s",
    "runInParallelInput": "Run in parallel : %s",
    "vsVersionSelected": "VisualStudio version selected for test execution : %s",
    "ErrorWhileReadingTestSettings": "Error occurred while reading test settings file. Error : %s.",
    "UnexpectedVersionString": "Unexpected version string detected for vstest.console.exe: %s.",
    "testplanConfigInput": "Test plan configuration Id : %s",
    "rerunFailedThreshold": "Rerun failed tests threshold: %s",
    "LookingForVsInstalltion": "Attempting to find vstest.console from a visual studio installation with version %s.",
    "invalidRerunMaxAttempts": "Invalid/Exceeded rerun maximum attempts, defaulting to 3",
    "noVstestConsole": "Tests will not be executed with vstest console. Install Visual Studio 2017 RC or above to run tests via vstest console.",
    "LookingForBuildToolsInstalltion": "Attempting to find vstest.console from a visual studio build tools installation with version %s.",
    "ErrorWhileUpdatingResponseFile": "Error occurred while updating the response file '%s'. All the tests will be executed for this run.",
    "ErrorWhilePublishingCodeChanges": "Error occurred while publishing the code changes. All the tests will be executed for this run.",
    "OverrideUseVerifiableInstrumentation": "Overriding UseVerifiableInstrumentation field to false in the runsettings file.",
    "ErrorWhileCreatingResponseFile": "Error occurred while creating the response file. All the tests will be executed for this run.",
    "testAssembliesSelector": "Test assemblies",
    "invalidRerunFailedTestCasesMaxLimit": "Invalid rerun failed tests case limit, defaulting to 5",
    "minimumRunTimePerBatchWarning": "'Running time (seconds) per batch' should be at least '%s' seconds. Defaulting to the minimum supported value."
  },
  "author": "Microsoft Corporation",
  "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?LinkId=835764)",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "minimumAgentVersion": "2.103.0",
  "execution": {
    "Node": {
      "target": "runvstest.js"
    }
  },
  "releaseNotes": "<ul><li><b>Run tests using an agent job:</b> Unified agent across Build, Release and Test allows for automation agents to be used for testing purposes as well. You can distribute tests using the multi-agent job setting. The multi-config job setting can be used to replicate tests in different configurations. <a href=\"https://aka.ms/testingwithphases\" target=\"_blank\">More information</a></li><li><b>Test Impact Analysis:</b> Automatically select and run only the tests needed to validate the code change.</li><li>Use the <b>Visual Studio Test Platform Installer task</b> to run tests without needing a full Visual Studio installation.</li></ul>",
  "inputs": [
    {
      "options": {
        "testRun": "Test run",
        "testPlan": "Test plan",
        "testAssemblies": "Test assemblies"
      },
      "required": true,
      "type": "pickList",
      "groupName": "testSelection",
      "name": "testSelector",
      "label": "Select tests using",
      "defaultValue": "testAssemblies",
      "properties": {
        "EditableOptions": "True"
      },
      "helpMarkDown": "<ul><li><b>Test assembly: </b>Use this option to specify one or more test assemblies that contain your tests. You can optionally specify a filter criteria to select only specific tests.</li><li><b>Test plan: </b>Use this option to run tests from your test plan that have an automated test method associated with it.</li><li><b>Test run: </b>Use this option when you are setting up an environment to run tests from the Test hub. This option should not be used when running tests in a continuous integration / continuous deployment (CI/CD) pipeline.</li>"
    },
    {
      "required": true,
      "type": "multiLine",
      "groupName": "testSelection",
      "name": "testAssemblyVer2",
      "label": "Test files",
      "defaultValue": "**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**",
      "properties": {
        "resizable": "true",
        "rows": "3"
      },
      "visibleRule": "testSelector = testAssemblies",
      "helpMarkDown": "Run tests from the specified files.<br>Ordered tests and webtests can be run by specifying the .orderedtest and .webtest files respectively. To run .webtest, Visual Studio 2017 Update 4 or higher is needed. <br><br>The file paths are relative to the search folder. Supports multiple lines of minimatch patterns. [More information](https://aka.ms/minimatchexamples)"
    },
    {
      "required": true,
      "type": "pickList",
      "groupName": "testSelection",
      "name": "testPlan",
      "label": "Test plan",
      "defaultValue": "",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      },
      "visibleRule": "testSelector = testPlan",
      "helpMarkDown": "Select a test plan containing test suites with automated test cases."
    },
    {
      "required": true,
      "type": "pickList",
      "groupName": "testSelection",
      "name": "testSuite",
      "label": "Test suite",
      "defaultValue": "",
      "properties": {
        "EditableOptions": "True",
        "DisableManageLink": "True",
        "MultiSelect": "True"
      },
      "visibleRule": "testSelector = testPlan",
      "helpMarkDown": "Select one or more test suites containing automated test cases. Test case work items must be associated with an automated test method. [Learn more.](https://go.microsoft.com/fwlink/?linkid=847773"
    },
    {
      "required": true,
      "type": "pickList",
      "groupName": "testSelection",
      "name": "testConfiguration",
      "label": "Test configuration",
      "defaultValue": "",
      "properties": {
        "DisableManageLink": "True",
        "EditableOptions": "True"
      },
      "visibleRule": "testSelector = testPlan",
      "helpMarkDown": "Select Test Configuration."
    },
    {
      "required": false,
      "type": "string",
      "groupName": "testSelection",
      "name": "tcmTestRun",
      "label": "Test Run",
      "defaultValue": "$(test.RunId)",
      "properties": {
        "resizable": "true",
        "rows": "3"
      },
      "visibleRule": "testSelector = testRun",
      "helpMarkDown": "Test run based selection is used when triggering automated test runs from the test hub. This option cannot be used for running tests in the CI/CD pipeline."
    },
    {
      "label": "Search folder",
      "defaultValue": "$(System.DefaultWorkingDirectory)",
      "type": "string",
      "name": "searchFolder",
      "helpMarkDown": "Folder to search for the test assemblies.",
      "groupName": "testSelection",
      "required": true
    },
    {
      "label": "Test results folder",
      "defaultValue": "$(Agent.TempDirectory)\\TestResults",
      "type": "string",
      "name": "resultsFolder",
      "helpMarkDown": "Folder to store test results. When this input is not specified, results are stored in $(Agent.TempDirectory)/TestResults by default, which is cleaned at the end of a pipeline run. The results directory will always be cleaned up at the start of the vstest task before the tests are run. Relative folder path if provided will be considered relative to $(Agent.TempDirectory)",
      "groupName": "testSelection",
      "required": false
    },
    {
      "helpMarkDown": "Additional criteria to filter tests from Test assemblies. For example: `Priority=1|Name=MyTestMethod`. [More information](https://msdn.microsoft.com/en-us/library/jj155796.aspx)",
      "visibleRule": "testSelector = testAssemblies",
      "label": "Test filter criteria",
      "defaultValue": "",
      "groupName": "testSelection",
      "name": "testFiltercriteria",
      "type": "string",
      "required": false
    },
    {
      "helpMarkDown": "Automatically select, and run only the tests needed to validate the code change. [More information](https://aka.ms/tialearnmore)",
      "visibleRule": "testSelector = testAssemblies",
      "label": "Run only impacted tests",
      "defaultValue": "False",
      "groupName": "testSelection",
      "name": "runOnlyImpactedTests",
      "type": "boolean",
      "required": false
    },
    {
      "helpMarkDown": "Number of builds after which to automatically run all tests. Test Impact Analysis stores the mapping between test cases and source code. It is recommended to regenerate the mapping by running all tests, on a regular basis.",
      "visibleRule": "testSelector = testAssemblies && runOnlyImpactedTests = true",
      "label": "Number of builds after which all tests should be run",
      "defaultValue": "50",
      "groupName": "testSelection",
      "name": "runAllTestsAfterXBuilds",
      "type": "string",
      "required": false
    },
    {
      "label": "Test mix contains UI tests",
      "defaultValue": "false",
      "type": "boolean",
      "name": "uiTests",
      "helpMarkDown": "To run UI tests, ensure that the agent is set to run in interactive mode. Setting up an agent to run interactively must be done before queueing the build / release. Checking this box does <b>not</b> configure the agent in interactive mode automatically. This option in the task is to only serve as a reminder to configure agent appropriately to avoid failures. <br><br> Hosted Windows agents from the VS 2015 and 2017 pools can be used to run UI tests.<br> [More information](https://aka.ms/uitestmoreinfo).",
      "groupName": "testSelection",
      "required": false
    },
    {
      "label": "Select test platform using",
      "options": {
        "location": "Specific location",
        "version": "Version"
      },
      "defaultValue": "version",
      "type": "radio",
      "name": "vstestLocationMethod",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "options": {
        "latest": "Latest",
        "toolsInstaller": "Installed by Tools Installer",
        "16.0": "Visual Studio 2019",
        "15.0": "Visual Studio 2017",
        "14.0": "Visual Studio 2015"
      },
      "required": false,
      "type": "pickList",
      "groupName": "executionOptions",
      "name": "vsTestVersion",
      "label": "Test platform version",
      "defaultValue": "latest",
      "properties": {
        "EditableOptions": "True"
      },
      "visibleRule": "vstestLocationMethod = version",
      "helpMarkDown": "The version of Visual Studio test to use. If latest is specified it chooses Visual Studio 2017 or Visual Studio 2015 depending on what is installed. Visual Studio 2013 is not supported. To run tests without needing Visual Studio on the agent, use the ‘Installed by tools installer’ option. Be sure to include the ‘Visual Studio Test Platform Installer’ task to acquire the test platform from nuget."
    },
    {
      "helpMarkDown": "Optionally supply the path to VSTest.",
      "visibleRule": "vstestLocationMethod = location",
      "label": "Path to vstest.console.exe",
      "defaultValue": "",
      "groupName": "executionOptions",
      "name": "vstestLocation",
      "type": "string",
      "required": false
    },
    {
      "label": "Settings file",
      "defaultValue": "",
      "type": "filePath",
      "name": "runSettingsFile",
      "helpMarkDown": "Path to runsettings or testsettings file to use with the tests.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "helpMarkDown": "Override parameters defined in the `TestRunParameters` section of runsettings file or `Properties` section of testsettings file. For example: `-key1 value1 -key2 value2`. Note: Properties specified in testsettings file can be accessed via the TestContext using Visual Studio 2017 Update 4 or higher ",
      "properties": {
        "resizable": "true",
        "rows": "3",
        "editorExtension": "ms.vss-services-azure.parameters-grid"
      },
      "label": "Override test run parameters",
      "defaultValue": "",
      "groupName": "executionOptions",
      "name": "overrideTestrunParameters",
      "type": "multiLine",
      "required": false
    },
    {
      "label": "Path to custom test adapters",
      "defaultValue": "",
      "type": "string",
      "name": "pathtoCustomTestAdapters",
      "helpMarkDown": "Directory path to custom test adapters. Adapters residing in the same folder as the test assemblies are automatically discovered.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "label": "Run tests in parallel on multi-core machines",
      "defaultValue": "False",
      "type": "boolean",
      "name": "runInParallel",
      "helpMarkDown": "If set, tests will run in parallel leveraging available cores of the machine. This will override the MaxCpuCount if specified in your runsettings file. [Click here](https://aka.ms/paralleltestexecution) to learn more about how tests are run in parallel.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "label": "Run tests in isolation",
      "defaultValue": "False",
      "type": "boolean",
      "name": "runTestsInIsolation",
      "helpMarkDown": "Runs the tests in an isolated process. This makes vstest.console.exe process less likely to be stopped on an error in the tests, but tests might run slower. This option currently cannot be used when running with the multi-agent job setting.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "label": "Code coverage enabled",
      "defaultValue": "False",
      "type": "boolean",
      "name": "codeCoverageEnabled",
      "helpMarkDown": "Collect code coverage information from the test run.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "label": "Other console options",
      "defaultValue": "",
      "type": "string",
      "name": "otherConsoleOptions",
      "helpMarkDown": "Other console options that can be passed to vstest.console.exe, as documented <a href=\"https://aka.ms/vstestotherconsoleoptions\" target=\"_blank\">here</a>. <p>These options are not supported and will be ignored when running tests using the ‘Multi agent’ parallel setting of an agent job or when running tests using ‘Test plan’ or 'Test run' option or when a custom batching option is selected. The options can be specified using a settings file instead.</p>",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "options": {
        "basedOnTestCases": "Based on number of tests and agents",
        "basedOnExecutionTime": "Based on past running time of tests",
        "basedOnAssembly": "Based on test assemblies"
      },
      "required": false,
      "type": "pickList",
      "groupName": "advancedExecutionOptions",
      "name": "distributionBatchType",
      "label": "Batch tests",
      "defaultValue": "basedOnTestCases",
      "properties": {
        "EditableOptions": "True"
      },
      "helpMarkDown": "A batch is a group of tests. A batch of tests runs its tests at the same time and results are published for the batch. If the job in which the task runs is set to use multiple agents, each agent picks up any available batches of tests to run in parallel.<br><br><b>Based on the number of tests and agents:</b> Simple batching based on the number of tests and agents participating in the test run.<br><br><b>Based on past running time of tests:</b> This batching considers past running time to create batches of tests such that each batch has approximately equal running time.<br><br><b>Based on test assemblies:</b> Tests from an assembly are batched together."
    },
    {
      "options": {
        "customBatchSize": "Specify a batch size",
        "autoBatchSize": "Automatically determine the batch size"
      },
      "required": false,
      "type": "radio",
      "groupName": "advancedExecutionOptions",
      "name": "batchingBasedOnAgentsOption",
      "label": "Batch options",
      "defaultValue": "autoBatchSize",
      "visibleRule": "distributionBatchType = basedOnTestCases",
      "helpMarkDown": "Simple batching based on the number of tests and agents participating in the test run. When the batch size is automatically determined, each batch contains `(total number of tests / number of agents)` tests. If a batch size is specified, each batch will contain the specified number of tests."
    },
    {
      "helpMarkDown": "Specify batch size",
      "visibleRule": "distributionBatchType = basedOnTestCases && batchingBasedOnAgentsOption = customBatchSize",
      "label": "Number of tests per batch",
      "defaultValue": "10",
      "groupName": "advancedExecutionOptions",
      "name": "customBatchSizeValue",
      "type": "string",
      "required": true
    },
    {
      "options": {
        "customTimeBatchSize": "Specify running time per batch",
        "autoBatchSize": "Automatically determine the batch time"
      },
      "required": false,
      "type": "radio",
      "groupName": "advancedExecutionOptions",
      "name": "batchingBasedOnExecutionTimeOption",
      "label": "Batch options",
      "defaultValue": "autoBatchSize",
      "properties": {
        "EditableOptions": "True"
      },
      "visibleRule": "distributionBatchType = basedOnExecutionTime",
      "helpMarkDown": "This batching considers past running time to create batches of tests such that each batch has approximately equal running time. Quick running tests will be batched together, while longer running tests may belong to a separate batch. When this option is used with the multi-agent job setting, total test time is reduced to a minimum."
    },
    {
      "helpMarkDown": "Specify the running time (sec) per batch",
      "visibleRule": "distributionBatchType = basedOnExecutionTime && batchingBasedOnExecutionTimeOption = customTimeBatchSize",
      "label": "Running time (sec) per batch",
      "defaultValue": "60",
      "groupName": "advancedExecutionOptions",
      "name": "customRunTimePerBatchValue",
      "type": "string",
      "required": true
    },
    {
      "label": "Replicate tests instead of distributing when multiple agents are used in the job",
      "defaultValue": "False",
      "type": "boolean",
      "name": "dontDistribute",
      "helpMarkDown": "Choosing this option will not distribute tests across agents when the task is running in a multi-agent job.<br>Each of the selected test(s) will be repeated on each agent.<br>The option is not applicable when the agent job is configured to run with no parallelism or with the multi-config option.",
      "groupName": "advancedExecutionOptions",
      "required": false
    },
    {
      "label": "Test run title",
      "defaultValue": "",
      "type": "string",
      "name": "testRunTitle",
      "helpMarkDown": "Provide a name for the test run.",
      "groupName": "reportingOptions",
      "required": false
    },
    {
      "label": "Build platform",
      "defaultValue": "",
      "type": "string",
      "name": "platform",
      "helpMarkDown": "Build platform against which the tests should be reported. If you have defined a variable for platform in your build task, use that here.",
      "groupName": "reportingOptions",
      "required": false
    },
    {
      "label": "Build configuration",
      "defaultValue": "",
      "type": "string",
      "name": "configuration",
      "helpMarkDown": "Build configuration against which the tests should be reported. If you have defined a variable for configuration in your build task, use that here.",
      "groupName": "reportingOptions",
      "required": false
    },
    {
      "label": "Upload test attachments",
      "defaultValue": "true",
      "type": "boolean",
      "name": "publishRunAttachments",
      "helpMarkDown": "Opt in/out of publishing run level attachments.",
      "groupName": "reportingOptions",
      "required": false
    },
    {
      "label": "Fail the task if a minimum number of tests are not run.",
      "defaultValue": "False",
      "type": "boolean",
      "name": "failOnMinTestsNotRun",
      "helpMarkDown": "Selecting this option will fail the task if specified minimum number of tests is not run.",
      "groupName": "reportingOptions",
      "required": false
    },
    {
      "helpMarkDown": "Specify the minimum # of tests that should be run for the task to succeed. Total tests executed is calculated as the sum of passed, failed and aborted tests.",
      "visibleRule": "failOnMinTestsNotRun = true",
      "label": "Minimum # of tests",
      "defaultValue": "1",
      "groupName": "reportingOptions",
      "name": "minimumExpectedTests",
      "type": "string",
      "required": false
    },
    {
      "label": "Collect advanced diagnostics in case of catastrophic failures",
      "defaultValue": "false",
      "type": "boolean",
      "name": "diagnosticsEnabled",
      "helpMarkDown": "Collect advanced diagnostics in case of catastrophic failures.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "options": {
        "onAbortOnly": "On abort only",
        "never": "Never",
        "always": "Always"
      },
      "required": false,
      "type": "pickList",
      "groupName": "executionOptions",
      "name": "collectDumpOn",
      "label": "Collect process dump and attach to test run report",
      "defaultValue": "onAbortOnly",
      "visibleRule": "diagnosticsEnabled = true",
      "helpMarkDown": "Collect process dump and attach to test run report."
    },
    {
      "label": "Rerun failed tests",
      "defaultValue": "False",
      "type": "boolean",
      "name": "rerunFailedTests",
      "helpMarkDown": "Selecting this option will rerun any failed tests until they pass or the maximum # of attempts is reached.",
      "groupName": "executionOptions",
      "required": false
    },
    {
      "options": {
        "basedOnTestFailurePercentage": "% failure",
        "basedOnTestFailureCount": "# of failed tests"
      },
      "required": false,
      "type": "pickList",
      "groupName": "executionOptions",
      "name": "rerunType",
      "label": "Do not rerun if test failures exceed specified threshold",
      "defaultValue": "basedOnTestFailurePercentage",
      "properties": {
        "EditableOptions": "True"
      },
      "visibleRule": "rerunFailedTests = true",
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures.<br>You can specify % failures or # of failed tests as a threshold."
    },
    {
      "helpMarkDown": "Use this option to avoid rerunning tests when failure rate crosses the specified threshold. This is applicable if any environment issues leads to massive failures.",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailurePercentage",
      "label": "% failure",
      "defaultValue": "30",
      "groupName": "executionOptions",
      "name": "rerunFailedThreshold",
      "type": "string",
      "required": false
    },
    {
      "helpMarkDown": "Use this option to avoid rerunning tests when number of failed test cases crosses specified limit. This is applicable if any environment issues leads to massive failures.",
      "visibleRule": "rerunFailedTests = true && rerunType = basedOnTestFailureCount",
      "label": "# of failed tests",
      "defaultValue": "5",
      "groupName": "executionOptions",
      "name": "rerunFailedTestCasesMaxLimit",
      "type": "string",
      "required": false
    },
    {
      "helpMarkDown": "Specify the maximum # of times a failed test should be retried. If a test passes before the maximum # of attempts is reached, it will not be rerun further.",
      "visibleRule": "rerunFailedTests = true",
      "label": "Maximum # of attempts",
      "defaultValue": "3",
      "groupName": "executionOptions",
      "name": "rerunMaxAttempts",
      "type": "string",
      "required": false
    }
  ],
  "dataSourceBindings": [
    {
      "resultSelector": "jsonpath:$.value[*]",
      "target": "testPlan",
      "endpointId": "tfs:teamfoundation",
      "callbackContextTemplate": "{\"skip\": \"{{add skip 1000}}\"}",
      "initialContextTemplate": "{\"skip\": \"0\"}",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans?filterActivePlans=true&api-version=3.0-preview.2&$skip={{skip}}&$top=1000",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }",
      "callbackRequiredTemplate": "{{isEqualNumber result.count 1000}}"
    },
    {
      "resultSelector": "jsonpath:$.value[*]",
      "resultTemplate": "{ \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{id}}} - {{{name}}}\" }",
      "target": "testConfiguration",
      "endpointId": "tfs:teamfoundation",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/configurations?api-version=3.0-preview.1"
    },
    {
      "parameters": {
        "testPlan": "$(testPlan)"
      },
      "target": "testSuite",
      "endpointId": "tfs:teamfoundation",
      "endpointUrl": "{{endpoint.url}}/{{system.teamProject}}/_apis/test/plans/{{testPlan}}/suites?$asTreeView=true&api-version=3.0-preview.2",
      "resultSelector": "jsonpath:$.value[*]"
    }
  ],
  "groups": [
    {
      "name": "testSelection",
      "isExpanded": true,
      "displayName": "Test selection"
    },
    {
      "name": "executionOptions",
      "isExpanded": true,
      "displayName": "Execution options"
    },
    {
      "name": "advancedExecutionOptions",
      "isExpanded": false,
      "displayName": "Advanced execution options"
    },
    {
      "name": "reportingOptions",
      "isExpanded": true,
      "displayName": "Reporting options"
    }
  ],
  "name": "VSTest-sxs",
  "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/test/vstest",
  "category": "Test",
  "visibility": [
    "Build",
    "Release"
  ]
}
