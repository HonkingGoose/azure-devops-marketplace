{
  "helpMarkDown": "[Learn more about this task](https://go.microsoft.com/fwlink/?linkid=832194) or [see the .NET Core documentation](https://docs.microsoft.com/dotnet/core/)",
  "messages": {
    "PackagesInstalledSuccessfully": "Packages were restored successfully",
    "NGCommon_NoSourcesFoundInConfig": "No package sources were found in the NuGet.config file at %s",
    "Info_MatchingUrlWasFoundSettingAuth": "Using authentication information for the following URI: ",
    "Error_NoVersionWasFoundWhichMatches": "No version was found which matches the input %s",
    "noWebProjectFound": "No web project was found in the repository. Web projects are identified by presence of either a web.config file, wwwroot folder in the directory, or by the usage of Microsoft.Net.Web.Sdk in your project file. You can set Publish web projects property to false (publishWebProjects: false in yml) if your project doesn't follow this convention or if you want to publish projects other than web projects.",
    "NGCommon_SpsNotFound": "Unable to find the '%s' [%s] area. There may be a problem with your Team Foundation Server installation.",
    "Error_NoMatchingFilesFoundForPattern": "No matching files were found with search pattern: %s",
    "Info_SavingTempConfig": "Saving NuGet.config to a temporary config file.",
    "NGCommon_NuGetConfigIsPackagesConfig": "Expected a NuGet.config file at %s, but its contents appear to be a packages.config. Check the settings for the %s task and confirm you selected NuGet.config rather than packages.config.",
    "Error_ExpectedConfigurationElement": "Invalid xml. Expected element named 'configuration'.",
    "zipFailed": "Zip failed with error: %s",
    "NGCommon_AreaNotFoundInSps": "Unable to locate the '%s' [%s] area. The service containing that area may not be available in your region.",
    "PackagesFailedToInstall": "Packages failed to restore",
    "Warning_SessionCreationFailed": "Could not create provenance session: %s",
    "PackagesFailedToPublish": "Packages failed to publish",
    "Error_CommandNotRecognized": "The command %s was not recognized.",
    "UnknownFeedType": "Unknown feed type '%s'",
    "Net5Update": "Info: Azure Pipelines hosted agents have been updated and now contain .Net 5.x SDK/Runtime along with the older .Net Core version which are currently lts. Unless you have locked down a SDK version for your project(s), 5.x SDK might be picked up which might have breaking behavior as compared to previous versions. You can learn more about the breaking changes here: https://docs.microsoft.com/en-us/dotnet/core/tools/ and https://docs.microsoft.com/en-us/dotnet/core/compatibility/ . To learn about more such changes and troubleshoot, refer here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops#troubleshooting",
    "Warning_MoreThanOneVersionInBuildNumber": "Found more than one instance of version data in BUILD_BUILDNUMBER.Assuming first instance is version.",
    "Error_NoSourceSpecifiedForPush": "No source was specified for push",
    "Warning_AutomaticallyVersionReferencedProjects": "The automatic package versioning and include referenced projects options do not work together. Referenced projects will not inherit the custom version provided by the automatic versioning settings.",
    "NGCommon_UnabletoDetectNuGetVersion": "Unknown NuGet version selected.",
    "Info_NoPackagesMatchedTheSearchPattern": "No packages matched the search pattern.",
    "Error_AutomaticallyVersionReleases": "Autoversion: Getting version number from build option is not supported in releases",
    "Error_ApiKeyNotSupported": "DotNetCore currently does not support using an encrypted Api Key.",
    "Warning_UpdatingNuGetVersion": "Updating version of NuGet.exe to %s from %s. Behavior changes or breaking changes might occur as NuGet updates to a new version. If this is not desired, deselect the 'Check for Latest Version' option in the task.",
    "Error_NuGetToolInstallerFailer": "Tool install failed: %s",
    "Error_PushNotARegularFile": "%s is not a file. Check the 'Path/Pattern to nupkg' property of the task.",
    "NGCommon_DetectedNuGetExtensionsPath": "Detected NuGet extensions loader path (NUGET_EXTENSIONS_PATH environment variable): %s",
    "Info_UsingToolPath": "Using tool path: %s",
    "BuildIdentityPermissionsHint": "For internal feeds, make sure the build service identity '%s' [%s] has access to the feed.",
    "Error_PackageFailure": "An error occurred while trying to pack the files.",
    "Error_NoVersionFoundInBuildNumber": "Could not find version number data in the following environment variable: BUILD_BUILDNUMBER. The value of the variable should contain a substring with the following formats: X.Y.Z or X.Y.Z.A where A, X, Y, and Z are positive integers.",
    "Info_UsingVersion": "Using version: %s",
    "CouldNotSetCodePaging": "Could not set the code paging of due to following error: %s",
    "noProjectFilesFound": "Project file(s) matching the specified pattern were not found.",
    "NGCommon_DetectedNuGetVersion": "Detected NuGet version %s / %s",
    "PackagesPublishedSuccessfully": "Packages were published successfully",
    "Info_NoFilesMatchedTheSearchPattern": "No files matched the search pattern.",
    "Info_ResolvedToolFromCache": "Resolved from tool cache: %s",
    "Info_AttemptingToPackFile": "Attempting to pack file: ",
    "NGCommon_RemovingSources": "Preparing to set credentials in NuGet.config",
    "NGCommon_IgnoringNuGetExtensionsPath": "Detected NuGet extensions loader path (NUGET_EXTENSIONS_PATH environment variable). Extensions are ignored when using the built-in NuGet client",
    "NGCommon_NuGetConfigIsInvalid": "The NuGet.config at %s is invalid.",
    "dotnetCommandFailed": "Dotnet command failed with non-zero exit code on the following projects : %s",
    "noPublishFolderFoundToZip": "A publish folder could not be found to zip for project file: %s.",
    "Info_AvailableVersions": "The available versions are: %s",
    "NGCommon_UnableToFindTool": "Unable to find tool %s",
    "NGCommon_AddingSources": "Setting credentials in NuGet.config",
    "Error_NoUrlWasFoundWhichMatches": "No download URL was found for %s",
    "Error_NoValueFoundForEnvVar": "No value was found for the provided environment variable.",
    "Info_ExpectBehaviorChangeWhenUsingVersionQuery": "You are using a query match on the version string. Behavior changes or breaking changes might occur as NuGet updates to a new version.",
    "Net5NugetVersionCompat": ".NET 5 has some compatibility issues with older Nuget versions(<=5.7), so if you are using an older Nuget version(and not dotnet cli) to restore, then the dotnet cli commands (e.g. dotnet build) which rely on such restored packages might fail. To mitigate such error, you can either: (1) - Use dotnet cli to restore, (2) - Use Nuget version 5.8 to restore, (3) - Use global.json using an older sdk version(<=3) to build",
    "DeprecatedDotnet2_2_And_3_0": "Info: .NET Core SDK/runtime 2.2 and 3.0 are now End of Life(EOL) and have been removed from all hosted agents. If you're using these SDK/runtimes on hosted agents, kindly upgrade to newer versions which are not EOL, or else use UseDotNet task to install the required version."
  },
  "dataSourceBindings": [
    {
      "target": "feedRestore",
      "resultTemplate": "{ \"Value\" : \"{{#if project}}{{{project.id}}}\\/{{/if}}{{{id}}}\", \"DisplayValue\" : \"{{{name}}}\" }",
      "endpointUrl": "{{endpoint.url}}/_apis/packaging/feeds?includeUrls=False",
      "resultSelector": "jsonpath:$.value[*]",
      "endpointId": "tfs:feed"
    },
    {
      "target": "feedPublish",
      "resultTemplate": "{ \"Value\" : \"{{#if project}}{{{project.id}}}\\/{{/if}}{{{id}}}\", \"DisplayValue\" : \"{{{name}}}\" }",
      "endpointUrl": "{{endpoint.url}}/_apis/packaging/feeds?includeUrls=False",
      "resultSelector": "jsonpath:$.value[*]",
      "endpointId": "tfs:feed"
    }
  ],
  "id": "6171c853-a612-5699-bfed-56aefa97d158",
  "version": {
    "Patch": 0,
    "Major": 2,
    "Minor": 202
  },
  "runsOn": [
    "Agent"
  ],
  "instanceNameFormat": "dotnet $(command)",
  "groups": [
    {
      "isExpanded": true,
      "name": "restoreAuth",
      "displayName": "Feeds and authentication",
      "visibleRule": "command = restore"
    },
    {
      "isExpanded": false,
      "name": "restoreAdvanced",
      "displayName": "Advanced",
      "visibleRule": "command = restore"
    },
    {
      "isExpanded": true,
      "name": "pushAuth",
      "displayName": "Destination feed and authentication",
      "visibleRule": "command = push"
    },
    {
      "isExpanded": false,
      "name": "pushAdvanced",
      "displayName": "Advanced",
      "visibleRule": "command = push"
    },
    {
      "isExpanded": false,
      "name": "packOptions",
      "displayName": "Pack options",
      "visibleRule": "command = pack"
    },
    {
      "isExpanded": false,
      "name": "packAdvanced",
      "displayName": "Advanced",
      "visibleRule": "command = pack"
    },
    {
      "isExpanded": false,
      "name": "generalAdvanced",
      "displayName": "Advanced",
      "visibleRule": "command != pack && command != push && command != restore"
    }
  ],
  "minimumAgentVersion": "2.115.0",
  "name": "DotNetCoreCLI-sxs",
  "friendlyName": ".NET Core (Side-by-side)",
  "execution": {
    "Node10": {
      "argumentFormat": "",
      "target": "dotnetcore.js"
    }
  },
  "visibility": [
    "Build",
    "Release"
  ],
  "helpUrl": "https://docs.microsoft.com/azure/devops/pipelines/tasks/build/dotnet-core-cli",
  "category": "Build",
  "inputs": [
    {
      "properties": {
        "EditableOptions": "False"
      },
      "name": "command",
      "options": {
        "run": "run",
        "restore": "restore",
        "build": "build",
        "test": "test",
        "pack": "pack",
        "custom": "custom",
        "push": "nuget push",
        "publish": "publish"
      },
      "helpMarkDown": "The dotnet command to run. Select 'Custom' to add arguments or use a command not listed here.",
      "type": "pickList",
      "defaultValue": "build",
      "required": true,
      "label": "Command"
    },
    {
      "helpMarkDown": "If true, the task will try to find the web projects in the repository and run the publish command on them. Web projects are identified by presence of either a web.config file or wwwroot folder in the directory.",
      "label": "Publish web projects",
      "name": "publishWebProjects",
      "visibleRule": "command = publish",
      "type": "boolean",
      "defaultValue": "true",
      "required": true
    },
    {
      "helpMarkDown": "The path to the csproj file(s) to use. You can use wildcards (e.g. **/*.csproj for all .csproj files in all subfolders). **This field follows glob pattern, and is run against root of the repository at all times irrespective of Working Directory.**",
      "label": "Path to project(s)",
      "name": "projects",
      "visibleRule": "command = build || command = restore || command = run || command = test || command = custom || publishWebProjects = false",
      "type": "multiLine",
      "defaultValue": "",
      "required": false
    },
    {
      "helpMarkDown": "The command to pass to dotnet.exe for execution.",
      "label": "Custom command",
      "name": "custom",
      "visibleRule": "command = custom",
      "type": "string",
      "defaultValue": "",
      "required": true
    },
    {
      "helpMarkDown": "Arguments to the selected command. For example, build configuration, output folder, runtime. The arguments depend on the command selected.",
      "label": "Arguments",
      "name": "arguments",
      "visibleRule": "command = build || command = publish || command = run || command = test || command = custom",
      "type": "string",
      "defaultValue": "",
      "required": false
    },
    {
      "helpMarkDown": "Write the additional arguments to be passed to **restore** command.",
      "label": "Arguments",
      "name": "restoreArguments",
      "visibleRule": "command = restore",
      "type": "string",
      "defaultValue": "",
      "required": false
    },
    {
      "helpMarkDown": "Enabling this option will generate a test results TRX file in `$(Agent.TempDirectory)` and results will be published to the server. <br>This option appends `--logger trx --results-directory $(Agent.TempDirectory)` to the command line arguments. <br><br>Code coverage can be collected by adding `--collect \"Code coverage\"` option to the command line arguments. This is currently only available on the Windows platform.",
      "label": "Publish test results and code coverage",
      "name": "publishTestResults",
      "visibleRule": "command = test",
      "type": "boolean",
      "defaultValue": "true",
      "required": false
    },
    {
      "helpMarkDown": "Provide a name for the test run.",
      "label": "Test run title",
      "name": "testRunTitle",
      "visibleRule": "command = test",
      "type": "string",
      "defaultValue": "",
      "required": false
    },
    {
      "helpMarkDown": "If true, folder created by the publish command will be zipped.",
      "label": "Zip published projects",
      "name": "zipAfterPublish",
      "visibleRule": "command = publish",
      "type": "boolean",
      "defaultValue": "true",
      "required": false
    },
    {
      "helpMarkDown": "If true, folders created by the publish command will have project's folder name prefixed to their folder names when output path is specified explicitly in arguments. This is useful if you want to publish multiple projects to the same folder.",
      "label": "Add project's folder name to publish path",
      "name": "modifyOutputPath",
      "visibleRule": "command = publish",
      "type": "boolean",
      "defaultValue": "true",
      "required": false
    },
    {
      "type": "radio",
      "name": "selectOrConfig",
      "label": "Feeds to use",
      "defaultValue": "select",
      "required": "true",
      "groupName": "restoreAuth",
      "options": {
        "select": "Feed(s) I select here",
        "config": "Feeds in my NuGet.config"
      },
      "aliases": [
        "feedsToUse"
      ],
      "helpMarkDown": "You can either select a feed from Azure Artifacts and/or NuGet.org here, or commit a nuget.config file to your source code repository and set its path here."
    },
    {
      "type": "pickList",
      "name": "feedRestore",
      "visibleRule": "selectOrConfig = select",
      "label": "Use packages from this Azure Artifacts feed",
      "defaultValue": "",
      "required": "false",
      "properties": {
        "EditableOptions": "True"
      },
      "groupName": "restoreAuth",
      "aliases": [
        "vstsFeed"
      ],
      "helpMarkDown": "Include the selected feed in the generated NuGet.config. You must have Azure Artifacts installed and licensed to select a feed here."
    },
    {
      "groupName": "restoreAuth",
      "name": "includeNuGetOrg",
      "helpMarkDown": "Include NuGet.org in the generated NuGet.config.",
      "type": "boolean",
      "defaultValue": "true",
      "visibleRule": "selectOrConfig = select",
      "required": "false",
      "label": "Use packages from NuGet.org"
    },
    {
      "groupName": "restoreAuth",
      "name": "nugetConfigPath",
      "helpMarkDown": "The NuGet.config in your repository that specifies the feeds from which to restore packages.",
      "type": "filePath",
      "defaultValue": "",
      "visibleRule": "selectOrConfig = config",
      "required": "false",
      "label": "Path to NuGet.config"
    },
    {
      "type": "connectedService:ExternalNuGetFeed",
      "name": "externalEndpoints",
      "visibleRule": "selectOrConfig = config",
      "label": "Credentials for feeds outside this organization/collection",
      "required": false,
      "properties": {
        "EditableOptions": "False",
        "MultiSelectFlatList": "True"
      },
      "groupName": "restoreAuth",
      "aliases": [
        "externalFeedCredentials"
      ],
      "helpMarkDown": "Credentials to use for external registries located in the selected NuGet.config. For feeds in this organization/collection, leave this blank; the build’s credentials are used automatically."
    },
    {
      "helpMarkDown": "Prevents NuGet from using packages from local machine caches.",
      "label": "Disable local cache",
      "name": "noCache",
      "groupName": "restoreAdvanced",
      "type": "boolean",
      "defaultValue": "false",
      "required": "false"
    },
    {
      "aliases": [
        "restoreDirectory"
      ],
      "groupName": "restoreAdvanced",
      "name": "packagesDirectory",
      "helpMarkDown": "Specifies the folder in which packages are installed. If no folder is specified, packages are restored into the default NuGet package cache.",
      "type": "string",
      "defaultValue": "",
      "required": "false",
      "label": "Destination directory"
    },
    {
      "groupName": "restoreAdvanced",
      "name": "verbosityRestore",
      "options": {
        "Diagnostic": "Diagnostic",
        "-": "-",
        "Minimal": "Minimal",
        "Detailed": "Detailed",
        "Normal": "Normal",
        "Quiet": "Quiet"
      },
      "helpMarkDown": "Specifies the amount of detail displayed in the output.",
      "type": "pickList",
      "defaultValue": "Detailed",
      "required": "false",
      "label": "Verbosity"
    },
    {
      "aliases": [
        "packagesToPush"
      ],
      "name": "searchPatternPush",
      "helpMarkDown": "The pattern to match or path to nupkg files to be uploaded. Multiple patterns can be separated by a semicolon.",
      "type": "filePath",
      "defaultValue": "$(Build.ArtifactStagingDirectory)/*.nupkg",
      "visibleRule": "command = push",
      "required": true,
      "label": "Path to NuGet package(s) to publish"
    },
    {
      "label": "Target feed location",
      "name": "nuGetFeedType",
      "visibleRule": "command = push",
      "type": "radio",
      "defaultValue": "internal",
      "required": true,
      "options": {
        "external": "External NuGet server (including other organizations/collections)",
        "internal": "This organization/collection"
      }
    },
    {
      "type": "pickList",
      "name": "feedPublish",
      "visibleRule": "command = push && nuGetFeedType = internal",
      "label": "Target feed",
      "defaultValue": "",
      "required": true,
      "properties": {
        "EditableOptions": "True"
      },
      "aliases": [
        "publishVstsFeed"
      ],
      "helpMarkDown": "Select a feed hosted in this organization. You must have Azure Artifacts installed and licensed to select a feed here."
    },
    {
      "helpMarkDown": "Associate this build/release pipeline’s metadata (run #, source code information) with the package",
      "label": "Publish pipeline metadata",
      "name": "publishPackageMetadata",
      "groupName": "pushAdvanced",
      "visibleRule": "command = push && nuGetFeedType = internal",
      "type": "boolean",
      "defaultValue": true
    },
    {
      "helpMarkDown": "The NuGet service connection that contains the external NuGet server’s credentials.",
      "label": "NuGet server",
      "name": "externalEndpoint",
      "visibleRule": "command = push && nuGetFeedType = external",
      "aliases": [
        "publishFeedCredentials"
      ],
      "required": true,
      "type": "connectedService:ExternalNuGetFeed"
    },
    {
      "aliases": [
        "packagesToPack"
      ],
      "name": "searchPatternPack",
      "helpMarkDown": "Pattern to search for csproj or nuspec files to pack.\n\nYou can separate multiple patterns with a semicolon, and you can make a pattern negative by prefixing it with '!'. Example: `**/*.csproj;!**/*.Tests.csproj`",
      "type": "filePath",
      "defaultValue": "**/*.csproj",
      "visibleRule": "command = pack",
      "required": true,
      "label": "Path to csproj or nuspec file(s) to pack"
    },
    {
      "aliases": [
        "configuration"
      ],
      "name": "configurationToPack",
      "helpMarkDown": "When using a csproj file this specifies the configuration to package",
      "type": "string",
      "defaultValue": "$(BuildConfiguration)",
      "visibleRule": "command = pack",
      "required": false,
      "label": "Configuration to Package"
    },
    {
      "aliases": [
        "packDirectory"
      ],
      "name": "outputDir",
      "helpMarkDown": "Folder where packages will be created. If empty, packages will be created alongside the csproj file.",
      "type": "filePath",
      "defaultValue": "$(Build.ArtifactStagingDirectory)",
      "visibleRule": "command = pack",
      "required": false,
      "label": "Package Folder"
    },
    {
      "helpMarkDown": "Don't build the project before packing. Corresponds to the --no-build command line parameter.",
      "label": "Do not build",
      "name": "nobuild",
      "visibleRule": "command = pack",
      "type": "boolean",
      "defaultValue": "false",
      "required": false
    },
    {
      "helpMarkDown": "Additionally creates symbol NuGet packages. Corresponds to the --include-symbols command line parameter.",
      "label": "Include Symbols",
      "name": "includesymbols",
      "visibleRule": "command = pack",
      "type": "boolean",
      "defaultValue": "false",
      "required": false
    },
    {
      "helpMarkDown": "Includes source code in the package. Corresponds to the --include-source command line parameter.",
      "label": "Include Source",
      "name": "includesource",
      "visibleRule": "command = pack",
      "type": "boolean",
      "defaultValue": "false",
      "required": false
    },
    {
      "groupName": "packOptions",
      "name": "versioningScheme",
      "options": {
        "byBuildNumber": "Use the build number",
        "byEnvVar": "Use an environment variable",
        "byPrereleaseNumber": "Use the date and time",
        "off": "Off"
      },
      "helpMarkDown": "Cannot be used with include referenced projects. If you choose 'Use the date and time', this will generate a [SemVer](http://semver.org/spec/v1.0.0.html)-compliant version formatted as `X.Y.Z-ci-datetime` where you choose X, Y, and Z.\n\nIf you choose 'Use an environment variable', you must select an environment variable and ensure it contains the version number you want to use.\n\nIf you choose 'Use the build number', this will use the build number to version your package. **Note:** Under Options set the build number format to be '[$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)](https://go.microsoft.com/fwlink/?LinkID=627416)'.",
      "type": "pickList",
      "defaultValue": "off",
      "required": true,
      "label": "Automatic package versioning"
    },
    {
      "groupName": "packOptions",
      "name": "versionEnvVar",
      "helpMarkDown": "Enter the variable name without $, $env, or %.",
      "type": "string",
      "defaultValue": "",
      "visibleRule": "versioningScheme = byEnvVar",
      "required": true,
      "label": "Environment variable"
    },
    {
      "type": "string",
      "name": "requestedMajorVersion",
      "visibleRule": "versioningScheme = byPrereleaseNumber",
      "label": "Major",
      "defaultValue": "1",
      "required": true,
      "groupName": "packOptions",
      "aliases": [
        "majorVersion"
      ],
      "helpMarkDown": "The 'X' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)"
    },
    {
      "type": "string",
      "name": "requestedMinorVersion",
      "visibleRule": "versioningScheme = byPrereleaseNumber",
      "label": "Minor",
      "defaultValue": "0",
      "required": true,
      "groupName": "packOptions",
      "aliases": [
        "minorVersion"
      ],
      "helpMarkDown": "The 'Y' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)"
    },
    {
      "type": "string",
      "name": "requestedPatchVersion",
      "visibleRule": "versioningScheme = byPrereleaseNumber",
      "label": "Patch",
      "defaultValue": "0",
      "required": true,
      "groupName": "packOptions",
      "aliases": [
        "patchVersion"
      ],
      "helpMarkDown": "The 'Z' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)"
    },
    {
      "helpMarkDown": "Specifies a list of token = value pairs, separated by semicolons, where each occurrence of $token$ in the .nuspec file will be replaced with the given value. Values can be strings in quotation marks.",
      "label": "Additional build properties",
      "name": "buildProperties",
      "groupName": "packAdvanced",
      "type": "string",
      "defaultValue": "",
      "required": false
    },
    {
      "groupName": "packAdvanced",
      "name": "verbosityPack",
      "options": {
        "Diagnostic": "Diagnostic",
        "-": "-",
        "Minimal": "Minimal",
        "Detailed": "Detailed",
        "Normal": "Normal",
        "Quiet": "Quiet"
      },
      "helpMarkDown": "Specifies the amount of detail displayed in the output.",
      "type": "pickList",
      "defaultValue": "Detailed",
      "required": "false",
      "label": "Verbosity"
    },
    {
      "helpMarkDown": "Current working directory where the script is run. Empty is the root of the repo (build) or artifacts (release), which is $(System.DefaultWorkingDirectory). The project search pattern is **NOT** relative to working directory.",
      "label": "Working directory",
      "name": "workingDirectory",
      "groupName": "generalAdvanced",
      "visibleRule": "command != restore && command != push && command != pack",
      "type": "filePath",
      "required": "false"
    }
  ],
  "description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command",
  "demands": [],
  "author": "Microsoft Corporation"
}
