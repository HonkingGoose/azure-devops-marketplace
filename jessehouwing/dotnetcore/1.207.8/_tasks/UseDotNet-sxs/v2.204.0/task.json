{
  "id": "47d193c8-164a-5ba1-8231-f37a0e1da92b",
  "instanceNameFormat": "Use .NET Core $(packageType) $(version)",
  "description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
  "version": {
    "Major": 2,
    "Minor": 204,
    "Patch": 0
  },
  "friendlyName": "Use .NET Core (Side-by-side)",
  "demands": [],
  "messages": {
    "VersionNotAllowed": "Version %s is not allowed. Allowed version types are: majorVersion.x, majorVersion.minorVersion.x, majorVersion.minorVersion.patchVersion. More details: %s",
    "LegacyPlatform": "Detected platform (Legacy): %s",
    "GlobalJsonFound": "Found a global.json at path: %s",
    "VersionNotFoundInCache": "Version %s was not found in cache.",
    "VersionsCanNotBeCompared": "Versions %s and %s cannot be compared. Both versions should be explicit.",
    "CopyingFoldersIntoPath": "Copying all root folders into installation path: %s",
    "NoSuitableChannelWereFound": "Channel corresponding to version %s could not be found.",
    "DownloadingUrl": "Downloading .NET Core package from URL: %s",
    "CouldNotDownload": "Could not download installation package from this URL: %s Error: %s",
    "ErrorWhileGettingVersionFromChannel": "Failed while getting version %s from channel %s with error: %s",
    "CopyingFilesIntoPath": "Copying root files (such as dotnet.exe) into installation path: %s",
    "getMachinePlatformFailed": "Failed to get machine platform details. Error: %s.",
    "FailedToCopyTopLevelFiles": "Failed to copy root files into installation path: %s. Error: %s",
    "FallingBackToAdjacentChannels": "Version %s could not be found in its channel, will now search in adjacent channels.",
    "getDownloadUrlsFailed": "Failed to get download URLS. Error: %s.",
    "UrlForReleaseChannelNotFound": "Could not find URL for releases.json of channel version: %s",
    "ComparingInstalledFolderVersions": "Comparing if version being installed %s is greater than already installed version with folder name %s",
    "FilesDataIsIncorrectInVersion": "In release %s for version %s, File data is incorrect (might have missing required fields, such as name, rid and url): %s",
    "SettingUpNugetProxySettings": "Setting up proxy configuration for NuGet.",
    "CheckingToolCache": "Checking if a cached copy exists for this version...",
    "ExplicitVersionRequired": "Version: %s is not allowed. Versions to be installed should be of format: major.minor.patchversion. For example: 2.2.1",
    "MatchingVersionForUserInputVersion": "Found version %s in channel %s for user specified version spec: %s",
    "VersionCanNotBeDownloadedFromUrl": "Version: %s cannot be downloaded from URL: %s. Either the URL or version is incorrect.",
    "VersionFoundInCache": "Version: %s was found in cache.",
    "ToolToInstall": "Tool to install: .NET Core %s version %s.",
    "ExtractingPackage": "Extracting downloaded package %s.",
    "VersionNumberHasTheWrongFormat": "The version number: %s doesn't have the correct format. Versions can be given in the following formats: 2.x   => Install latest in major version. 2.2.x => Install latest in major and minor version. 2.2.104 => Install exact version. Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json",
    "FailureWhileInstallingNuGetVersion": "Failed while installing NuGet version. Error: %s",
    "CannotFindRuntimeVersionForCompletingInstallation": "Cannot find runtime version for package type: %s with version: %s",
    "CachingTool": "Caching this installed tool.",
    "runtimeVersionPropertyNotFound": "runtime-version property could not be found for .Net Core %s version %s.",
    "FailedWhileInstallingVersionAtPath": "Failed while installing version: %s at path: %s with error: %s",
    "InvalidChannelObject": "Object cannot be used as Channel, required properties such as channel-version, releases.json is missing.",
    "GettingDownloadUrl": "Getting URL to download .NET Core %s version: %s.",
    "ToolFailed": "Tool install failed: %s",
    "VersionInformationNotComplete": "Version: %s required information is not complete in releases.json file. Error: %s",
    "ExceptionWhileDownloadOrReadReleasesIndex": "Failed to download or parse releases-index.json with error: %s",
    "FileNameNotCorrectCompleteFileName": "File name %s is not a correct '.complete' file.",
    "ComparingInstalledFileVersions": "Comparing if version being installed %s is greater than already installed version with version complete file name %s",
    "NullDownloadUrls": "Could not construct download URL. Please ensure that specified version %s is valid.",
    "PrependGlobalToolPath": "Creating global tool path and pre-pending to PATH.",
    "GlobalJsonSdkVersion": "SDK version: %s is specified by global.json at path: %s",
    "UsingCachedTool": "Cached copy of .NET Core exists. No need to install afresh. Cached tool location: %s.",
    "OnlyExplicitVersionAllowed": "Only explicit versions and accepted, such as: 2.2.301. Version: %s is not valid.",
    "ReleasesIndexBodyIncorrect": "Parsed releases index body is not correct. Kindly see if the releases-index section is not empty in the file.",
    "SuccessfullyInstalled": "Successfully installed .NET Core %s version %s.",
    "DetectingPlatform": "Detecting OS platform to find correct download package for the OS.",
    "VersionFilesDataIncorrect": "Version's files data is missing or has missing required fields.",
    "InvalidVersionObject": "Releases.json has a release with invalid %s object: %s",
    "UnableToAccessPath": "Unable to access path: %s. Error: %s. Please make sure that agent process has access to the path.",
    "VersionNotFound": "%s version matching: %s could not be found",
    "DepricatedVersionNetCore": "NET Core version you specfied %s is out of support and will be removed from hosted agents soon. Please refer to https://aka.ms/dotnet-core-support for more information about the .NET support policy.",
    "ErrorWhileSettingDotNetToolPath": "Failed while prepending .Net Core Tool path to PATH envrionment variable. Error: %s",
    "FailedToReadGlobalJson": "The global.json at path: '%s' has the wrong format. For information about global.json, visit here: https://docs.microsoft.com/en-us/dotnet/core/tools/global-json. Error while trying to read: %s",
    "SupportPhaseNotPresentInChannel": "support-phase is not present in the channel with channel-version %s.",
    "VersionIsNotLocalLatest": "Version: %s is not the latest among the versions present at %s",
    "InstallingAfresh": "The cache does not contain the requested version of .NET Core. Downloading and installing it now.",
    "CreatingInstallationCompeleteFile": "Creating installation complete marker file for .Net core %s version %s",
    "PrimaryPlatform": "Detected platform (Primary): %s",
    "VersionsFileMalformed": "The specified version's download links are not correctly formed in the supported versions document => %s/",
    "GlobalJsonIsEmpty": "global.json at path: %s is empty. No version is specified.",
    "VersionIsLocalLatest": "Version: %s is the latest among the versions present at path: %s",
    "LookingForVersionInChannel": "Searching for version in channel %s",
    "PathNotFoundException": "Path: %s could not be located/found. Make sure the path exists.",
    "FailedToDownloadPackage": "Failed to download package for installation",
    "RequiredChannelVersionForSpec": "Finding channel %s for version %s",
    "ChannelVersionsNotComparable": "Channel versions %s and %s can not be compared. They both must have numeric major and minor versions.",
    "FailedWhileExtractingPacakge": "Failed while extracting downloaded package with error: %s",
    "MatchingVersionNotFound": "No matching %s version could be found for specified version: %s Kindly note the preview versions are only considered in latest version searches if Include Preview Versions checkbox is checked.",
    "CouldNotDetectPlatform": "Could not detect the machine's OS",
    "InstallingNuGetVersion": "Installing NuGet version %s",
    "ImplicitVersionNotSupported": "Version should be a valid and explicit version: %s",
    "InvalidVersion": "Invalid version specified %s",
    "DownloadUrlForMatchingOsNotFound": "Download URL for .Net Core %s version %s could not be found for the following OS platforms (rid): %s",
    "FailedInDetectingMachineArch": "Failed while detecting machine OS platform with error: %s",
    "FailedToFindGlobalJson": "Failed to find global.json at and inside path: %s"
  },
  "author": "Microsoft Corporation",
  "helpMarkDown": "[Learn more about this task](https://aka.ms/AA4xgy0)",
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "minimumAgentVersion": "2.144.0",
  "execution": {
    "Node10": {
      "target": "usedotnet.js"
    }
  },
  "satisfies": [
    "DotNetCore"
  ],
  "releaseNotes": "<li>Support for installing multiple versions side by side.</li><li>Support for patterns in version to fetch latest in minor/major version.</li><li>Restrict Multi-level lookup</li><li>Installs NuGet and provides proxy support.</li><li>Installs sdk versions from `global.json` file(s)</li>",
  "inputs": [
    {
      "label": "Package to install",
      "options": {
        "runtime": "Runtime",
        "sdk": "SDK (contains runtime)"
      },
      "defaultValue": "sdk",
      "type": "pickList",
      "name": "packageType",
      "helpMarkDown": "Please select whether to install only runtime or SDK.",
      "required": false
    },
    {
      "label": "Use global json",
      "visibleRule": "packageType = sdk",
      "defaultValue": false,
      "type": "boolean",
      "name": "useGlobalJson",
      "helpMarkDown": "Select this option to install all SDKs from global.json files. These files are searched from system.DefaultWorkingDirectory. You can change the search root path by setting working directory input.",
      "required": false
    },
    {
      "label": "Working Directory",
      "visibleRule": "useGlobalJson = true",
      "type": "filePath",
      "name": "workingDirectory",
      "helpMarkDown": "Specify path from where global.json files should be searched when using `Use global json`. If empty, `system.DefaultWorkingDirectory` will be considered as the root path.",
      "required": "false"
    },
    {
      "label": "Version",
      "visibleRule": "useGlobalJson = false || packageType = runtime",
      "defaultValue": "",
      "type": "string",
      "name": "version",
      "helpMarkDown": "Specify version of .NET Core SDK or runtime to install.<br/>Versions can be given in the following formats<li>2.x   => Install latest in major version.</li><li>2.2.x => Install latest in major and minor version</li><li>2.2.104 => Install exact version</li><br/>Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json). Like link to releases.json for 2.2 version is https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/releases.json",
      "required": false
    },
    {
      "label": "Compatible Visual Studio version",
      "helpMarkDown": "Specify version of compatible visual studio for which .NET core sdk to install. Specifiy complete vs-version like 16.6.4 containing major version, minor version and patch number.Find the value of `version` for installing SDK/Runtime, from the releases.json. The link to releases.json of that major.minor version can be found in [**releases-index file.**](https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json)",
      "defaultValue": "",
      "type": "string",
      "name": "vsVersion",
      "groupName": "advanced",
      "required": false
    },
    {
      "label": "Include Preview Versions",
      "visibleRule": "useGlobalJson = false  || packageType = runtime",
      "defaultValue": "false",
      "type": "boolean",
      "name": "includePreviewVersions",
      "helpMarkDown": "Select if you want preview versions to be included while searching for latest versions, such as while searching 2.2.x. This setting is ignored if you specify an exact version, such as: 3.0.100-preview3-010431",
      "required": false
    },
    {
      "label": "Path To Install .Net Core",
      "helpMarkDown": "Specify where .Net Core SDK/Runtime should be installed. Different paths can have the following impact on .Net's behavior.<li>$(Agent.ToolsDirectory): This makes the version to be cached on the agent since this directory is not cleanup up across pipelines. All pipelines running on the agent, would have access to the versions installed previously using the agent.</li><li>$(Agent.TempDirectory): This can ensure that a pipeline doesn't use any cached version of .Net core since this folder is cleaned up after each pipeline.</li><li>Any other path: You can configure any other path given the agent process has access to the path. This will change the state of the machine and impact all processes running on it.<br/>Note that you can also configure Multi-Level Lookup setting which can configure .Net host's probing for a suitable version.",
      "defaultValue": "$(Agent.ToolsDirectory)/dotnet",
      "type": "string",
      "name": "installationPath",
      "groupName": "advanced",
      "required": false
    },
    {
      "label": "Perform Multi Level Lookup",
      "helpMarkDown": "This input is only applicable to Windows based agents. This configures the behavior of .Net host process for looking up a suitable shared framework.<li>unchecked: Only versions present in the folder specified in this task would be looked by the host process.</li><li>checked: The host will attempt to look in pre-defined global locations using multi-level lookup.<br/>The default global locations are: <br/><b>For Windows:</b><br/>C:\\Program Files\\dotnet (64-bit processes)<br/>C:\\Program Files (x86)\\dotnet (32-bit process)</li> You can read more about it [**HERE**](https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/multilevel-sharedfx-lookup.md).<br/>",
      "defaultValue": false,
      "type": "boolean",
      "name": "performMultiLevelLookup",
      "groupName": "advanced",
      "required": false
    }
  ],
  "groups": [
    {
      "name": "advanced",
      "isExpanded": true,
      "displayName": "Advanced"
    }
  ],
  "name": "UseDotNet-sxs",
  "helpUrl": "https://aka.ms/AA4xgy0",
  "category": "Tool",
  "ecosystem": "dotnet"
}
